
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import Interfaz.Interfaz;
import java.util.ArrayList;
import LogicaFCA.Logica;
import LogicaFCA.DatosJs;
import LogicaFCA.VariableGlobal;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\006\000\002\006\004\000\002\006\003" +
    "\000\002\006\003\000\002\005\006\000\002\005\004\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\012\004\000\002\012\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\015\004\000\002\015\003" +
    "\000\002\015\003\000\002\013\006\000\002\013\006\000" +
    "\002\013\010\000\002\013\010\000\002\013\006\000\002" +
    "\013\006\000\002\013\006\000\002\013\006\000\002\016" +
    "\004\000\002\016\003\000\002\016\003\000\002\021\006" +
    "\000\002\021\006\000\002\021\010\000\002\021\010\000" +
    "\002\017\004\000\002\017\003\000\002\017\003\000\002" +
    "\022\006\000\002\022\006\000\002\022\006\000\002\022" +
    "\006\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\011" +
    "\007\000\002\010\007\000\002\010\007\000\002\010\007" +
    "\000\002\007\010\000\002\007\003\000\002\004\004\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\003\000\002\004" +
    "\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\006\003\007\022\005\001\002\000\004\002" +
    "\215\001\002\000\004\006\010\001\002\000\004\002\000" +
    "\001\002\000\004\002\uffff\001\002\000\016\003\015\023" +
    "\014\031\016\034\013\043\012\044\020\001\002\000\020" +
    "\003\015\007\ufffc\023\014\031\016\034\013\043\012\044" +
    "\020\001\002\000\004\006\164\001\002\000\004\006\102" +
    "\001\002\000\006\004\072\033\073\001\002\000\004\007" +
    "\ufffb\001\002\000\004\006\044\001\002\000\004\007\043" +
    "\001\002\000\004\006\021\001\002\000\010\003\024\035" +
    "\023\045\022\001\002\000\004\036\036\001\002\000\004" +
    "\036\031\001\002\000\004\007\uffdc\001\002\000\012\003" +
    "\024\007\uffdd\035\023\045\022\001\002\000\004\007\027" +
    "\001\002\000\020\003\ufff6\007\ufff6\023\ufff6\031\ufff6\034" +
    "\ufff6\043\ufff6\044\ufff6\001\002\000\004\007\uffde\001\002" +
    "\000\006\025\032\032\033\001\002\000\004\021\035\001" +
    "\002\000\004\021\034\001\002\000\012\003\uffda\007\uffda" +
    "\035\uffda\045\uffda\001\002\000\012\003\uffdb\007\uffdb\035" +
    "\uffdb\045\uffdb\001\002\000\006\025\037\032\040\001\002" +
    "\000\004\021\042\001\002\000\004\021\041\001\002\000" +
    "\012\003\uffd8\007\uffd8\035\uffd8\045\uffd8\001\002\000\012" +
    "\003\uffd9\007\uffd9\035\uffd9\045\uffd9\001\002\000\004\002" +
    "\ufffe\001\002\000\010\003\047\027\045\030\046\001\002" +
    "\000\004\025\066\001\002\000\004\025\056\001\002\000" +
    "\010\007\ufff1\027\ufff1\030\ufff1\001\002\000\010\007\ufff3" +
    "\027\ufff3\030\ufff3\001\002\000\010\007\ufff2\027\ufff2\030" +
    "\ufff2\001\002\000\010\007\054\027\045\030\046\001\002" +
    "\000\010\007\ufff5\027\ufff5\030\ufff5\001\002\000\020\003" +
    "\ufffa\007\ufffa\023\ufffa\031\ufffa\034\ufffa\043\ufffa\044\ufffa" +
    "\001\002\000\010\007\ufff4\027\ufff4\030\ufff4\001\002\000" +
    "\004\026\057\001\002\000\010\016\060\017\061\046\062" +
    "\001\002\000\004\021\065\001\002\000\004\021\064\001" +
    "\002\000\004\021\063\001\002\000\010\007\uffc8\027\uffc8" +
    "\030\uffc8\001\002\000\010\007\uffca\027\uffca\030\uffca\001" +
    "\002\000\010\007\uffc9\027\uffc9\030\uffc9\001\002\000\004" +
    "\026\067\001\002\000\004\032\070\001\002\000\004\021" +
    "\071\001\002\000\010\007\uffcb\027\uffcb\030\uffcb\001\002" +
    "\000\006\004\072\033\073\001\002\000\024\003\uffc6\005" +
    "\uffc6\007\uffc6\023\uffc6\024\uffc6\031\uffc6\034\uffc6\043\uffc6" +
    "\044\uffc6\001\002\000\020\003\ufff9\007\ufff9\023\ufff9\031" +
    "\ufff9\034\ufff9\043\ufff9\044\ufff9\001\002\000\004\024\076" +
    "\001\002\000\006\004\072\033\073\001\002\000\004\005" +
    "\100\001\002\000\004\021\101\001\002\000\024\003\uffc7" +
    "\005\uffc7\007\uffc7\023\uffc7\024\uffc7\031\uffc7\034\uffc7\043" +
    "\uffc7\044\uffc7\001\002\000\016\003\106\035\103\037\112" +
    "\040\104\041\107\042\105\001\002\000\004\036\157\001" +
    "\002\000\004\036\152\001\002\000\004\036\135\001\002" +
    "\000\004\007\uffee\001\002\000\004\036\130\001\002\000" +
    "\020\003\106\007\uffef\035\103\037\112\040\104\041\107" +
    "\042\105\001\002\000\004\007\126\001\002\000\004\036" +
    "\113\001\002\000\004\010\114\001\002\000\010\003\116" +
    "\025\115\032\120\001\002\000\006\011\uffd5\024\uffd5\001" +
    "\002\000\006\011\uffd3\024\uffd3\001\002\000\006\011\122" +
    "\024\121\001\002\000\006\011\uffd4\024\uffd4\001\002\000" +
    "\006\025\124\032\125\001\002\000\004\021\123\001\002" +
    "\000\020\003\uffeb\007\uffeb\035\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\001\002\000\006\011\uffd7\024\uffd7\001\002" +
    "\000\006\011\uffd6\024\uffd6\001\002\000\020\003\ufff8\007" +
    "\ufff8\023\ufff8\031\ufff8\034\ufff8\043\ufff8\044\ufff8\001\002" +
    "\000\004\007\ufff0\001\002\000\006\025\131\032\132\001" +
    "\002\000\004\021\134\001\002\000\004\021\133\001\002" +
    "\000\020\003\uffe8\007\uffe8\035\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\001\002\000\020\003\uffe9\007\uffe9\035\uffe9" +
    "\037\uffe9\040\uffe9\041\uffe9\042\uffe9\001\002\000\004\010" +
    "\136\001\002\000\012\003\140\016\141\017\143\025\137" +
    "\001\002\000\006\011\uffcd\024\uffcd\001\002\000\006\011" +
    "\uffcc\024\uffcc\001\002\000\006\011\uffce\024\uffce\001\002" +
    "\000\006\011\145\024\144\001\002\000\006\011\uffcf\024" +
    "\uffcf\001\002\000\010\016\150\017\151\025\147\001\002" +
    "\000\004\021\146\001\002\000\020\003\uffea\007\uffea\035" +
    "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\001\002\000\006" +
    "\011\uffd1\024\uffd1\001\002\000\006\011\uffd0\024\uffd0\001" +
    "\002\000\006\011\uffd2\024\uffd2\001\002\000\006\025\153" +
    "\032\154\001\002\000\004\021\156\001\002\000\004\021" +
    "\155\001\002\000\020\003\uffe7\007\uffe7\035\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\001\002\000\020\003\uffe6\007" +
    "\uffe6\035\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002" +
    "\000\006\025\160\032\161\001\002\000\004\021\163\001" +
    "\002\000\004\021\162\001\002\000\020\003\uffec\007\uffec" +
    "\035\uffec\037\uffec\040\uffec\041\uffec\042\uffec\001\002\000" +
    "\020\003\uffed\007\uffed\035\uffed\037\uffed\040\uffed\041\uffed" +
    "\042\uffed\001\002\000\012\003\167\035\165\037\171\042" +
    "\166\001\002\000\004\036\207\001\002\000\004\036\202" +
    "\001\002\000\004\007\uffe3\001\002\000\014\003\167\007" +
    "\uffe4\035\165\037\171\042\166\001\002\000\004\036\174" +
    "\001\002\000\004\007\173\001\002\000\020\003\ufff7\007" +
    "\ufff7\023\ufff7\031\ufff7\034\ufff7\043\ufff7\044\ufff7\001\002" +
    "\000\004\010\175\001\002\000\010\003\116\025\115\032" +
    "\120\001\002\000\006\011\177\024\121\001\002\000\004" +
    "\021\200\001\002\000\014\003\uffe0\007\uffe0\035\uffe0\037" +
    "\uffe0\042\uffe0\001\002\000\004\007\uffe5\001\002\000\004" +
    "\010\203\001\002\000\012\003\140\016\141\017\143\025" +
    "\137\001\002\000\006\011\205\024\144\001\002\000\004" +
    "\021\206\001\002\000\014\003\uffdf\007\uffdf\035\uffdf\037" +
    "\uffdf\042\uffdf\001\002\000\006\025\210\032\211\001\002" +
    "\000\004\021\213\001\002\000\004\021\212\001\002\000" +
    "\014\003\uffe1\007\uffe1\035\uffe1\037\uffe1\042\uffe1\001\002" +
    "\000\014\003\uffe2\007\uffe2\035\uffe2\037\uffe2\042\uffe2\001" +
    "\002\000\004\007\ufffd\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\010\006\016\001\001\000\006\005\010\006" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\025\022\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\027\022\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\050\011\047\012\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\054\011\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\107\015\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\107\015\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\171\021" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\200\021\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/*Method that is called when parser can be recovered METODO QUE SE LLAMA AUTOMATICAMENTE ANTE ALGUN ERROR SINTACICO*/
	public void syntax_error(Symbol s){ 
        
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintactico Recuperado");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna); 
        Interfaz.Consolelog("Unexpected token: " +s.value); 

    }

	/*Method that is called when parser can't be recovered*/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
     
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintactico, Modo Panico");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna);
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


    ArrayList<VariableGlobal> varglobal = new ArrayList<>();
    String valtitulo,valtitulopie,valtitulolineas,archivo;
    String valtitulox;
    String valtituloy;
    String ruta1;
    String ruta2;
    ArrayList<String> valx = new ArrayList<>();
    ArrayList<String> valy = new ArrayList<>();
    ArrayList<String> valxpie = new ArrayList<>();
    ArrayList<String> valypie= new ArrayList<>();

     ArrayList<String> archivosruta1 = new ArrayList<>();
     ArrayList<String> archivosruta2 = new ArrayList<>();
    Logica logic= new Logica();
    DatosJs logicjs = new DatosJs();

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= generalinstruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // generalinstruction ::= RGENERARREPORTEESTADISTICO LLALEFT instructionrecursive LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("generalinstruction",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instructionrecursive ::= instruction instructionrecursive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionrecursive",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instructionrecursive ::= instruction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionrecursive",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instructionrecursive ::= error 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instructionrecursive",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruction ::= DEFINIRGLOBALES LLALEFT variables LLARIGHT 
            {
              Object RESULT =null;
		logic.variablesGloblales(varglobal);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= COMPARE expressioncompare 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= GRAFICADEBARRAS LLALEFT instrucciongraficabarras LLARIGHT 
            {
              Object RESULT =null;
		logic.Titulos(valtitulo,valtitulox,valtituloy);
                                                                logic.GraficaBarras();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= GRAFICAPIE LLALEFT instrucciongraficapie LLARIGHT 
            {
              Object RESULT =null;
		logic.GraficaPie(valxpie,valypie);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= GRAFICALINEAS LLALEFT instrucciongraficalineas LLARIGHT 
            {
              Object RESULT =null;
		logic.GraficaLineas(valtitulolineas,archivo);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variables ::= variables string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variables ::= variables double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables ::= string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables ::= double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variables",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucciongraficabarras ::= graficabarras instrucciongraficabarras 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongraficabarras",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucciongraficabarras ::= graficabarras 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongraficabarras",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrucciongraficabarras ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongraficabarras",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // graficabarras ::= TITULO DOSPUNTOS CARACTERESVARIABLES PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		valtitulo=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficabarras",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // graficabarras ::= TITULO DOSPUNTOS CADENACOMILLAS PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		valtitulo=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficabarras",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // graficabarras ::= EJEX DOSPUNTOS COLEFT cadenaovariable CORIGHT PCOMA 
            {
              String RESULT =null;
		int listatitulosxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listatitulosxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> listatitulosx = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		for(int i=0;i<listatitulosx.size();i++){
                                                                        valx.add(listatitulosx.get(i));
                                                                        }logic.variablestitulosX(valx);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficabarras",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // graficabarras ::= VALORES DOSPUNTOS COLEFT numeroovariable CORIGHT PCOMA 
            {
              String RESULT =null;
		int listatitulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listatitulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> listatitulosy = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		for(int i=0;i<listatitulosy.size();i++){
                                                                               valy.add(listatitulosy.get(i));
                                                                               }logic.variablestitulosY(valy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficabarras",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // graficabarras ::= TITULOX DOSPUNTOS CARACTERESVARIABLES PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		valtitulox=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficabarras",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // graficabarras ::= TITULOX DOSPUNTOS CADENACOMILLAS PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		valtitulox=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficabarras",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // graficabarras ::= TITULOY DOSPUNTOS CADENACOMILLAS PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		valtituloy=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficabarras",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // graficabarras ::= TITULOY DOSPUNTOS CARACTERESVARIABLES PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		valtituloy=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficabarras",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrucciongraficapie ::= graficapie instrucciongraficapie 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongraficapie",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucciongraficapie ::= graficapie 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongraficapie",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucciongraficapie ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongraficapie",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // graficapie ::= TITULO DOSPUNTOS CARACTERESVARIABLES PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		valtitulopie=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficapie",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // graficapie ::= TITULO DOSPUNTOS CADENACOMILLAS PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		valtitulopie=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficapie",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // graficapie ::= EJEX DOSPUNTOS COLEFT cadenaovariable CORIGHT PCOMA 
            {
              String RESULT =null;
		int listatitulosxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listatitulosxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> listatitulosx = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		for(int i=0;i<listatitulosx.size();i++){
                                                                        valxpie.add(listatitulosx.get(i));
                                                                        }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficapie",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // graficapie ::= VALORES DOSPUNTOS COLEFT numeroovariable CORIGHT PCOMA 
            {
              String RESULT =null;
		int listatitulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listatitulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> listatitulosy = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		for(int i=0;i<listatitulosy.size();i++){
                                                                               valypie.add(listatitulosy.get(i));}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficapie",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciongraficalineas ::= graficalineas instrucciongraficalineas 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongraficalineas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrucciongraficalineas ::= graficalineas 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongraficalineas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instrucciongraficalineas ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongraficalineas",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // graficalineas ::= TITULO DOSPUNTOS CARACTERESVARIABLES PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		valtitulolineas=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficalineas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // graficalineas ::= TITULO DOSPUNTOS CADENACOMILLAS PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		valtitulolineas=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficalineas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // graficalineas ::= ARCHIVO DOSPUNTOS CARACTERESVARIABLES PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		archivo=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficalineas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // graficalineas ::= ARCHIVO DOSPUNTOS CADENACOMILLAS PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		archivo=a;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficalineas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cadenaovariable ::= cadenaovariable COMA CARACTERESVARIABLES 
            {
              ArrayList<String> RESULT =null;
		int listatitulosxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listatitulosxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> listatitulosx = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int titulosxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titulosxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String titulosx = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= listatitulosx;
                                                                       RESULT.add(titulosx);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadenaovariable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cadenaovariable ::= cadenaovariable COMA CADENACOMILLAS 
            {
              ArrayList<String> RESULT =null;
		int listatitulosxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listatitulosxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> listatitulosx = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int titulosxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titulosxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String titulosx = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= listatitulosx;
                                                                       RESULT.add(titulosx);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadenaovariable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cadenaovariable ::= CARACTERESVARIABLES 
            {
              ArrayList<String> RESULT =null;
		int titulosxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titulosxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String titulosx = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>();
                                                                       RESULT.add(titulosx);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadenaovariable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cadenaovariable ::= CADENACOMILLAS 
            {
              ArrayList<String> RESULT =null;
		int titulosxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titulosxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String titulosx = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>();
                                                                       RESULT.add(titulosx);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadenaovariable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cadenaovariable ::= error 
            {
              ArrayList<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cadenaovariable",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // numeroovariable ::= numeroovariable COMA DECIMAL 
            {
              ArrayList<String> RESULT =null;
		int listatitulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listatitulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> listatitulosy = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int titulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String titulosy = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= listatitulosy;
                                                                       RESULT.add(titulosy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeroovariable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // numeroovariable ::= numeroovariable COMA CARACTERESVARIABLES 
            {
              ArrayList<String> RESULT =null;
		int listatitulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listatitulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> listatitulosy = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int titulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String titulosy = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= listatitulosy;
                                                                       RESULT.add(titulosy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeroovariable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // numeroovariable ::= numeroovariable COMA NUMBER 
            {
              ArrayList<String> RESULT =null;
		int listatitulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listatitulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> listatitulosy = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int titulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String titulosy = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= listatitulosy;
                                                                       RESULT.add(titulosy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeroovariable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // numeroovariable ::= DECIMAL 
            {
              ArrayList<String> RESULT =null;
		int titulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String titulosy = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>();
                                                                       RESULT.add(titulosy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeroovariable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // numeroovariable ::= NUMBER 
            {
              ArrayList<String> RESULT =null;
		int titulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String titulosy = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>();
                                                                       RESULT.add(titulosy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeroovariable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // numeroovariable ::= CARACTERESVARIABLES 
            {
              ArrayList<String> RESULT =null;
		int titulosyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int titulosyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String titulosy = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>();
                                                                       RESULT.add(titulosy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeroovariable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // numeroovariable ::= error 
            {
              ArrayList<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeroovariable",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // string ::= STRING CARACTERESVARIABLES IGUAL CADENACOMILLAS PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		VariableGlobal var = new VariableGlobal(a,b,"string");
                                                                varglobal.add(var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // double ::= DOUBLE CARACTERESVARIABLES IGUAL DECIMAL PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		VariableGlobal var = new VariableGlobal(a,b,"double");
                                                                varglobal.add(var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("double",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // double ::= DOUBLE CARACTERESVARIABLES IGUAL NUMBER PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		VariableGlobal var = new VariableGlobal(a,b,"double");
                                                                varglobal.add(var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("double",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // double ::= DOUBLE CARACTERESVARIABLES IGUAL PUNTAJEGENERAL PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		VariableGlobal var = new VariableGlobal(a,null,"general");
                                                                varglobal.add(var);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("double",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expressioncompare ::= PARLEFT expressioncompare COMA expressioncompare PARRIGHT PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Interfaz.Consolelog("RUTA 1:"+a+" RUTA 2:"+b);
                                                                              archivosruta1 = logic.Obtenerarchivos(a);
                                                                             archivosruta2 = logic.Obtenerarchivos(b);
                                                                              logicjs.Obtenerarchivos(archivosruta1,archivosruta2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressioncompare",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expressioncompare ::= CADENACOMILLASSIMPLE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressioncompare",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= MINUS expression 
            {
              Double RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double left = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = 0-left;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression ADD expression PCOMA 
            {
              Double RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double left = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double right = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = left+right;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= expression MINUS expression PCOMA 
            {
              Double RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double left = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double right = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = left-right;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= expression TIMES expression PCOMA 
            {
              Double RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double left = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double right = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = left*right;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= expression DIV expression PCOMA 
            {
              Double RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double left = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double right = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = left/right;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= PARLEFT expression PARRIGHT PCOMA 
            {
              Double RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double exp = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= NUMBER 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Double(num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= DECIMAL 
            {
              Double RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Double(num);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= error 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
