/*Imports and define package IMPORTACIONES Y PAQUETES*/
package Analyzers;
import java_cup.runtime.*;
import Interfaz.Interfaz;

//Codigo para el parser, variables y m√©todos    
parser code 
{:
	/*Method that is called when parser can be recovered METODO QUE SE LLAMA AUTOMATICAMENTE ANTE ALGUN ERROR SINTACICO*/
	public void syntax_error(Symbol s){ 
        
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintactico Recuperado");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna); 
        Interfaz.Consolelog("Unexpected token: " +s.value); 

    }

	/*Method that is called when parser can't be recovered*/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
     
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintactico, Modo Panico");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna);
    } 
:}
//Declaracion de terminales, no terminales y precedencias(demenoramayor)
terminal String PARLEFT,PARRIGHT;
terminal String LLALEFT,LLARIGHT;
terminal String ADD,MINUS,TIMES,DIV;
terminal String NUMBER;
terminal String DECIMAL;
terminal String UMINUS;
terminal String PCOMA;
terminal String RGENERARREPORTEESTADISTICO;
terminal String COMPARE;
terminal String COMA;
terminal String COMILLASIMPLE;
terminal String CARACTERES;

non terminal ini;
non terminal generalinstruction;
non terminal Double expression;
non terminal instruction;
non terminal instructionrecursive;
non terminal String expressioncompare;



precedence left ADD,MINUS;
precedence left TIMES,DIV;
precedence right UMINUS;

//produccion por donde empezara el analizador sintactico
start with ini; 

ini ::=
	generalinstruction
	| error 
;
generalinstruction ::=
        RGENERARREPORTEESTADISTICO LLALEFT instructionrecursive LLARIGHT
;

instructionrecursive ::=
    instruction instructionrecursive
    |instruction
    |error
;

instruction ::=
    COMPARE expressioncompare
;


expressioncompare ::=
    PARLEFT COMILLASIMPLE expressioncompare:a COMILLASIMPLE COMA COMILLASIMPLE expressioncompare:b COMILLASIMPLE PARRIGHT PCOMA {:Interfaz.Consolelog("RUTA 1:"+a+" RUTA 2:"+b);:}
    |CARACTERES:c                {:RESULT=c;:}
;


expression ::=
	MINUS expression:left				{:RESULT = 0-left;:} %prec UMINUS
	|expression:left ADD expression:right PCOMA		{:RESULT = left+right;:}
	|expression:left MINUS expression:right	PCOMA	{:RESULT = left-right;:}
	|expression:left TIMES expression:right	PCOMA	{:RESULT = left*right;:}
	|expression:left DIV expression:right PCOMA		{:RESULT = left/right;:}
	|PARLEFT expression:exp PARRIGHT PCOMA		{:RESULT = exp;:}
	|NUMBER:num					{:RESULT = new Double(num);:}
	|DECIMAL:num					{:RESULT = new Double(num);:}
;  