/*Imports and define package IMPORTACIONES Y PAQUETES*/
package Analyzers;
import java_cup.runtime.*;
import Interfaz.Interfaz;
import java.util.ArrayList;
import LogicaFCA.Logica;
import LogicaFCA.DatosJs;
import LogicaFCA.VariableGlobal;

//Codigo para el parser, variables y m√©todos    
parser code 
{:
	/*Method that is called when parser can be recovered METODO QUE SE LLAMA AUTOMATICAMENTE ANTE ALGUN ERROR SINTACICO*/
	public void syntax_error(Symbol s){ 
        
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintactico Recuperado");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna); 
        Interfaz.Consolelog("Unexpected token: " +s.value); 

    }

	/*Method that is called when parser can't be recovered*/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
     
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintactico, Modo Panico");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna);
    } 
:}

action code {:
    ArrayList<VariableGlobal> varglobal = new ArrayList<>();
    String valtitulo,valtitulopie,valtitulolineas,archivo;
    String valtitulox;
    String valtituloy;
    String ruta1;
    String ruta2;
    ArrayList<String> valx = new ArrayList<>();
    ArrayList<String> valy = new ArrayList<>();
    ArrayList<String> valxpie = new ArrayList<>();
    ArrayList<String> valypie= new ArrayList<>();

     ArrayList<String> archivosruta1 = new ArrayList<>();
     ArrayList<String> archivosruta2 = new ArrayList<>();
    Logica logic= new Logica();
    DatosJs logicjs = new DatosJs();
:}


//Declaracion de terminales, no terminales y precedencias(demenoramayor)
terminal String PARLEFT,PARRIGHT;
terminal String LLALEFT,LLARIGHT;
terminal String COLEFT,CORIGHT;
terminal String ADD,MINUS,TIMES,DIV;
terminal String NUMBER;
terminal String DECIMAL;
terminal String UMINUS;
terminal String PCOMA;
terminal String RGENERARREPORTEESTADISTICO;
terminal String COMPARE;
terminal String COMA;
terminal String CARACTERESVARIABLES;
terminal String IGUAL;
terminal String STRING;
terminal String DOUBLE;
terminal String DEFINIRGLOBALES;
terminal String CADENACOMILLAS;
terminal String CADENACOMILLASSIMPLE;
terminal String GRAFICADEBARRAS;
terminal String TITULO;
terminal String DOSPUNTOS;
terminal String EJEX;
terminal String TITULOY;
terminal String TITULOX;
terminal String VALORES;
terminal String GRAFICAPIE;
terminal String GRAFICALINEAS;
terminal String ARCHIVO;
terminal String PUNTAJEGENERAL;

non terminal ini;
non terminal generalinstruction;
non terminal Double expression;
non terminal instruction;
non terminal instructionrecursive;
non terminal String expressioncompare;
non terminal String double;
non terminal String string;
non terminal String variables;
non terminal String graficabarras;
non terminal ArrayList<String> cadenaovariable;
non terminal String instrucciongraficabarras;
non terminal String instrucciongraficapie;
non terminal String instrucciongraficalineas;
non terminal ArrayList<String> numeroovariable;
non terminal String graficapie;
non terminal String graficalineas;

precedence left ADD,MINUS;
precedence left TIMES,DIV;
precedence right UMINUS;

//produccion por donde empezara el analizador sintactico
start with ini; 

ini ::=
	generalinstruction
	| error 
;
generalinstruction ::=
        RGENERARREPORTEESTADISTICO LLALEFT instructionrecursive LLARIGHT
;

instructionrecursive ::=
     instruction instructionrecursive  
    |instruction
    |error
;

instruction ::=
    DEFINIRGLOBALES LLALEFT variables LLARIGHT {:logic.variablesGloblales(varglobal);:} 
    |COMPARE expressioncompare
    |GRAFICADEBARRAS LLALEFT instrucciongraficabarras LLARIGHT {:logic.Titulos(valtitulo,valtitulox,valtituloy);
                                                                logic.GraficaBarras();:}
    |GRAFICAPIE LLALEFT instrucciongraficapie LLARIGHT {:logic.GraficaPie(valxpie,valypie);:}
    |GRAFICALINEAS LLALEFT instrucciongraficalineas LLARIGHT {:logic.GraficaLineas(valtitulolineas,archivo);:}
;

variables ::=
    variables string
    |variables double
    |string 
    |double
    |error
;

instrucciongraficabarras::=
    graficabarras instrucciongraficabarras
    |graficabarras
    |error
;

graficabarras::=
    TITULO DOSPUNTOS CARACTERESVARIABLES:a PCOMA {:valtitulo=a;:}
    |TITULO DOSPUNTOS CADENACOMILLAS:a PCOMA {:valtitulo=a;:}
    |EJEX DOSPUNTOS COLEFT cadenaovariable:listatitulosx CORIGHT PCOMA {:for(int i=0;i<listatitulosx.size();i++){
                                                                        valx.add(listatitulosx.get(i));
                                                                        }logic.variablestitulosX(valx);:}
    |VALORES DOSPUNTOS COLEFT numeroovariable:listatitulosy  CORIGHT    PCOMA {:for(int i=0;i<listatitulosy.size();i++){
                                                                               valy.add(listatitulosy.get(i));
                                                                               }logic.variablestitulosY(valy);:}
    |TITULOX DOSPUNTOS CARACTERESVARIABLES:a PCOMA {:valtitulox=a;:}
    |TITULOX DOSPUNTOS CADENACOMILLAS:a PCOMA {:valtitulox=a;:}
    |TITULOY DOSPUNTOS CADENACOMILLAS:a PCOMA {:valtituloy=a;:}
    |TITULOY DOSPUNTOS CARACTERESVARIABLES:a PCOMA {:valtituloy=a;:}
;
instrucciongraficapie::=
    graficapie instrucciongraficapie
    |graficapie
    |error
;
graficapie::=
    TITULO DOSPUNTOS CARACTERESVARIABLES:a PCOMA {:valtitulopie=a;:}
    |TITULO DOSPUNTOS CADENACOMILLAS:a PCOMA {:valtitulopie=a;:}
    |EJEX DOSPUNTOS COLEFT cadenaovariable:listatitulosx CORIGHT PCOMA {:for(int i=0;i<listatitulosx.size();i++){
                                                                        valxpie.add(listatitulosx.get(i));
                                                                        }:}
    |VALORES DOSPUNTOS COLEFT numeroovariable:listatitulosy  CORIGHT    PCOMA {:for(int i=0;i<listatitulosy.size();i++){
                                                                               valypie.add(listatitulosy.get(i));}:}
;

instrucciongraficalineas::=
    graficalineas instrucciongraficalineas
    |graficalineas
    |error
;

graficalineas::=
    TITULO DOSPUNTOS CARACTERESVARIABLES:a PCOMA {:valtitulolineas=a;:}
    |TITULO DOSPUNTOS CADENACOMILLAS:a PCOMA {:valtitulolineas=a;:}
    |ARCHIVO DOSPUNTOS CARACTERESVARIABLES:a PCOMA {:archivo=a;:}
    |ARCHIVO DOSPUNTOS CADENACOMILLAS:a PCOMA {:archivo=a;:}
;

cadenaovariable::=
     cadenaovariable:listatitulosx COMA CARACTERESVARIABLES:titulosx {:RESULT= listatitulosx;
                                                                       RESULT.add(titulosx);:}
    |cadenaovariable:listatitulosx COMA CADENACOMILLAS:titulosx      {:RESULT= listatitulosx;
                                                                       RESULT.add(titulosx);:}
    |CARACTERESVARIABLES:titulosx                                    {:RESULT = new ArrayList<>();
                                                                       RESULT.add(titulosx);:}
    |CADENACOMILLAS:titulosx                                         {:RESULT = new ArrayList<>();
                                                                       RESULT.add(titulosx);:} 
    |error
;

numeroovariable::=
     numeroovariable:listatitulosy COMA DECIMAL:titulosy               {:RESULT= listatitulosy;
                                                                       RESULT.add(titulosy);:}           
    |numeroovariable:listatitulosy COMA CARACTERESVARIABLES:titulosy   {:RESULT= listatitulosy;
                                                                       RESULT.add(titulosy);:}
    |numeroovariable:listatitulosy COMA NUMBER:titulosy                {:RESULT= listatitulosy;
                                                                       RESULT.add(titulosy);:}
    |DECIMAL:titulosy                                                  {:RESULT = new ArrayList<>();
                                                                       RESULT.add(titulosy);:}
    |NUMBER:titulosy                                                  {:RESULT = new ArrayList<>();
                                                                       RESULT.add(titulosy);:}
    |CARACTERESVARIABLES:titulosy                                      {:RESULT = new ArrayList<>();
                                                                       RESULT.add(titulosy);:}
    |error
;

string ::=
    STRING CARACTERESVARIABLES:a IGUAL  CADENACOMILLAS:b  PCOMA {:VariableGlobal var = new VariableGlobal(a,b,"string");
                                                                varglobal.add(var);:}
;
double ::=
    DOUBLE CARACTERESVARIABLES:a IGUAL  DECIMAL:b  PCOMA {:VariableGlobal var = new VariableGlobal(a,b,"double");
                                                                varglobal.add(var);:}
    |DOUBLE CARACTERESVARIABLES:a IGUAL  NUMBER:b  PCOMA {:VariableGlobal var = new VariableGlobal(a,b,"double");
                                                                varglobal.add(var);:}
    |DOUBLE CARACTERESVARIABLES:a IGUAL  PUNTAJEGENERAL PCOMA {:VariableGlobal var = new VariableGlobal(a,null,"general");
                                                                varglobal.add(var);:}
;


expressioncompare ::=
    PARLEFT  expressioncompare:a  COMA  expressioncompare:b  PARRIGHT PCOMA {:Interfaz.Consolelog("RUTA 1:"+a+" RUTA 2:"+b);
                                                                              archivosruta1 = logic.Obtenerarchivos(a);
                                                                             archivosruta2 = logic.Obtenerarchivos(b);
                                                                              logicjs.Obtenerarchivos(archivosruta1,archivosruta2);:}
    |CADENACOMILLASSIMPLE:c                {:RESULT=c;:}
;

expression ::=
	MINUS expression:left				{:RESULT = 0-left;:} %prec UMINUS
	|expression:left ADD expression:right PCOMA		{:RESULT = left+right;:}
	|expression:left MINUS expression:right	PCOMA	{:RESULT = left-right;:}
	|expression:left TIMES expression:right	PCOMA	{:RESULT = left*right;:}
	|expression:left DIV expression:right PCOMA		{:RESULT = left/right;:}
	|PARLEFT expression:exp PARRIGHT PCOMA		{:RESULT = exp;:}
	|NUMBER:num					{:RESULT = new Double(num);:}
	|DECIMAL:num					{:RESULT = new Double(num);:}
        |error
;  