/*Imports and define package IMPORTACIONES Y PAQUETES*/
package AnalyzerJavascript;
import java_cup.runtime.*;
import Interfaz.Interfaz;
import java.util.ArrayList;
import LogicaFCA.Logica;
import LogicaFCA.VariableGlobal;
//Codigo para el parser, variables y m√©todos    
parser code 
{:
	/*Method that is called when parser can be recovered METODO QUE SE LLAMA AUTOMATICAMENTE ANTE ALGUN ERROR SINTACICO*/
	public void syntax_error(Symbol s){ 
        
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintacticojs Recuperado");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna); 
        Interfaz.Consolelog("Unexpected token: " +s.value); 

    }

	/*Method that is called when parser can't be recovered*/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
     
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintacticojs, Modo Panico");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna);
    } 
:}

action code {:
    int numclases = 0;
   
    Logica logic= new Logica();
    
:}


//Declaracion de terminales, no terminales y precedencias(demenoramayor)
terminal String LLALEFT,LLARIGHT;
terminal String PARLEFT,PARRIGHT;
terminal String CLASS;
terminal String NOTPAR;
terminal String CARACTERESVARIABLES;
terminal String NUMBER;
terminal String DECIMAL;
terminal String COMA,DOSPUNTOS;
terminal String PCOMA;
terminal String VAR,LET,CONST;
terminal String IGUAL;
terminal String CADCOM;
terminal String CADCOMSIM;
terminal String IF;
terminal String ADMIR;
terminal String MENOR,MAYOR;
terminal String AND,OR,NEGACION;
terminal String ELSE,FOR,WHILE,DO;
terminal String MAS,MENOS,POR,DIVISION,POTENCIA,MODULO;
terminal String SWITCH,CASE,BREAK,DEFAULT;
terminal String PRINT,REQUIRE;



non terminal ini;
non terminal generalinstruction;
non terminal instructionrecursive;
non terminal instruction;
non terminal recibirparametros;
non terminal variables;
non terminal variablesrecursivas;
non terminal sentenciaif;
non terminal recibirrelacion;
non terminal typevariable;
non terminal relacionconosinoperador;
non terminal sentenciaelse;
non terminal sentenciaelseif;
non terminal sentenciafor;
non terminal tiposvar;
non terminal instruccionfor;
non terminal operadoresrelacionales;
non terminal aumentodecremento;
non terminal String operadoresaritmeticos;
non terminal operadoreslogicos;
non terminal String typenumberovariable,prints;
non terminal oprecursivas;
non terminal sentenciawhile;
non terminal sentenciadowhile;
non terminal sentenciaswitch;
non terminal recursivecase,caseswitch,consolelog;
non terminal String recursiveprints;
non terminal llamada;
non terminal variablesglobales;

//produccion por donde empezara el analizador sintactico
start with ini; 

ini ::=
    generalinstruction ini
    |generalinstruction 
    |error
;

generalinstruction ::=
        CLASS CARACTERESVARIABLES:a LLALEFT instructionrecursive LLARIGHT {:numclases=numclases+1;
                                                                            logic.numclases(numclases);:} 
;

instructionrecursive ::=
     instruction instructionrecursive 
    |instruction
    |error
;

instruction ::=
    CARACTERESVARIABLES:a PARLEFT PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
    |CARACTERESVARIABLES:a PARLEFT recibirparametros PARRIGHT LLALEFT variablesrecursivas LLARIGHT
    |llamada
    |variablesglobales
;
llamada::=
    CARACTERESVARIABLES PARLEFT PARRIGHT  
    |CARACTERESVARIABLES PARLEFT recibirparametros PARRIGHT
    |CARACTERESVARIABLES PARLEFT PARRIGHT PCOMA 
    |CARACTERESVARIABLES PARLEFT recibirparametros PARRIGHT PCOMA
    ;
variablesglobales::=
    tiposvar CARACTERESVARIABLES IGUAL typevariable PCOMA
    |tiposvar CARACTERESVARIABLES IGUAL typevariable
    |tiposvar CARACTERESVARIABLES PCOMA
    |tiposvar CARACTERESVARIABLES 
    |tiposvar CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT
    |tiposvar CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA
    |CARACTERESVARIABLES IGUAL typevariable
    |CARACTERESVARIABLES IGUAL typevariable PCOMA
    |CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT
    |CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA
;
recibirparametros::=
    recibirparametros COMA typevariable
    |typevariable
;
relacionconosinoperador::=
    recibirrelacion AND relacionconosinoperador
    |recibirrelacion OR relacionconosinoperador
    |recibirrelacion
;

recibirrelacion::=
    NOTPAR recibirrelacion PARRIGHT
    |typevariable IGUAL IGUAL typevariable 
    |typevariable ADMIR IGUAL typevariable
    |typevariable MENOR typevariable
    |typevariable MAYOR typevariable
    |typevariable MENOR IGUAL typevariable
    |typevariable MAYOR IGUAL typevariable
    
;
operadoresrelacionales::=
    IGUAL IGUAL
    |ADMIR IGUAL
    |MENOR
    |MAYOR
    |MENOR IGUAL
    |MAYOR IGUAL
;
operadoresaritmeticos::=
    MAS:a {:RESULT=a;:}
    |MENOS:a {:RESULT=a;:}
    |POR:a {:RESULT=a;:}
    |DIVISION:a {:RESULT=a;:}
    |POTENCIA:a {:RESULT=a;:}
    |MODULO:a {:RESULT=a;:}
;
operadoreslogicos::=
    AND
    |OR
    |NEGACION
;
typevariable::=
    CARACTERESVARIABLES MAS typevariable
    |CADCOM MAS typevariable
    |CADCOMSIM MAS typevariable
    |DECIMAL MAS typevariable
    |NUMBER MAS typevariable
    
    |CARACTERESVARIABLES
    |CADCOM
    |CADCOMSIM
    |DECIMAL
    |NUMBER
;

variablesrecursivas::=
    variables variablesrecursivas
    |sentenciaif variablesrecursivas
    |sentenciafor variablesrecursivas
    |sentenciawhile variablesrecursivas
    |sentenciaswitch variablesrecursivas
    |consolelog variablesrecursivas
    |llamada variablesrecursivas
    |variables
    |sentenciaif
    |sentenciafor
    |sentenciawhile
    |sentenciaswitch
    |llamada
    |consolelog
;

variables::=
    VAR CARACTERESVARIABLES IGUAL typevariable PCOMA
    |VAR CARACTERESVARIABLES IGUAL typevariable
    |VAR CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT
    |VAR CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA
    |VAR CARACTERESVARIABLES PCOMA
    |VAR CARACTERESVARIABLES 
    
    |LET CARACTERESVARIABLES IGUAL typevariable PCOMA
    |LET CARACTERESVARIABLES IGUAL typevariable
    |LET CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT
    |LET CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA
    |LET CARACTERESVARIABLES PCOMA
    |LET CARACTERESVARIABLES

    |CONST CARACTERESVARIABLES IGUAL typevariable PCOMA
    |CONST CARACTERESVARIABLES IGUAL typevariable
    |CONST CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT
    |CONST CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA
    |CONST CARACTERESVARIABLES PCOMA
    |CONST CARACTERESVARIABLES

    |CARACTERESVARIABLES aumentodecremento
    |CARACTERESVARIABLES aumentodecremento PCOMA

    |CARACTERESVARIABLES IGUAL typevariable
    |CARACTERESVARIABLES IGUAL typevariable PCOMA 
    |CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT
    |CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA
    |error
;
tiposvar::=
    VAR
    |LET
    |CONST
;

sentenciaif::=
    IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
    |IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 
    |IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT BREAK PCOMA LLARIGHT

    |IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT sentenciaelse
    |IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT sentenciaelse
    |IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT BREAK PCOMA LLARIGHT sentenciaelse

    |IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT sentenciaelseif
    |IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT sentenciaelseif
    |IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT BREAK PCOMA LLARIGHT sentenciaelseif
    
;

sentenciaelse::=
    ELSE LLALEFT variablesrecursivas LLARIGHT
    |ELSE LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT
    |ELSE LLALEFT BREAK PCOMA LLARIGHT
;

sentenciaelseif::=
    ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT sentenciaelseif
    |ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT sentenciaelseif
    |ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT BREAK PCOMA LLARIGHT sentenciaelseif

    |ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT
    |ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT
    |ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT BREAK PCOMA LLARIGHT
;
sentenciafor::=
    FOR PARLEFT instruccionfor PARRIGHT LLALEFT variablesrecursivas LLARIGHT
    |FOR PARLEFT instruccionfor PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT
;
instruccionfor::=
    tiposvar CARACTERESVARIABLES IGUAL oprecursivas PCOMA
     CARACTERESVARIABLES operadoresrelacionales oprecursivas PCOMA
     CARACTERESVARIABLES aumentodecremento
     |CARACTERESVARIABLES IGUAL oprecursivas PCOMA
     CARACTERESVARIABLES operadoresrelacionales oprecursivas PCOMA
     CARACTERESVARIABLES aumentodecremento
;
aumentodecremento::=
    MAS MAS
    |MENOS MENOS
;


sentenciawhile::=
        WHILE PARLEFT CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT LLALEFT variablesrecursivas LLARIGHT
        | WHILE PARLEFT CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT

        |sentenciadowhile WHILE PARLEFT CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
        |sentenciadowhile WHILE PARLEFT CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 

        |WHILE PARLEFT NOTPAR CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT PARRIGHT LLALEFT variablesrecursivas LLARIGHT
        |WHILE PARLEFT NOTPAR CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT

        |sentenciadowhile WHILE PARLEFT NOTPAR CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT PARRIGHT LLALEFT variablesrecursivas LLARIGHT
        |sentenciadowhile WHILE PARLEFT NOTPAR CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT
;

sentenciadowhile::=
    DO LLALEFT variablesrecursivas LLARIGHT
    |DO LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT
;

sentenciaswitch::=
    SWITCH PARLEFT CARACTERESVARIABLES PARRIGHT LLALEFT recursivecase DEFAULT DOSPUNTOS variablesrecursivas LLARIGHT
    |SWITCH PARLEFT CARACTERESVARIABLES PARRIGHT LLALEFT recursivecase DEFAULT DOSPUNTOS LLARIGHT
;
recursivecase::=
    caseswitch recursivecase
    |caseswitch 
;

caseswitch::=
    CASE typenumberovariable DOSPUNTOS variablesrecursivas BREAK PCOMA
    |CASE typenumberovariable DOSPUNTOS BREAK PCOMA
;
oprecursivas::=
    oprecursivas typenumberovariable operadoresaritmeticos
    |typenumberovariable operadoresaritmeticos
    |oprecursivas typenumberovariable
    |typenumberovariable
    |error
;

consolelog::=
    PRINT PARLEFT recursiveprints:a PARRIGHT PCOMA {:Interfaz.Consolelog(a);:}
    |PRINT PARLEFT recursiveprints:a PARRIGHT  {:Interfaz.Consolelog(a);:}
;
recursiveprints::=
    prints:exp recursiveprints {:RESULT=exp;:}
    |prints:exp {:RESULT=exp;:}
;

prints::=
    NUMBER:a {:RESULT=a;:}
    |DECIMAL:a {:RESULT=a;:}
    |CARACTERESVARIABLES:a {:RESULT=a;:}
    |CADCOM:a {:RESULT=a;:}
    |operadoresaritmeticos:a {:RESULT=a;:}
    
;


typenumberovariable::=
    NUMBER:a {:RESULT=a;:}
    |DECIMAL:a {:RESULT=a;:}
    |CARACTERESVARIABLES:a {:RESULT=a;:}
    
;

