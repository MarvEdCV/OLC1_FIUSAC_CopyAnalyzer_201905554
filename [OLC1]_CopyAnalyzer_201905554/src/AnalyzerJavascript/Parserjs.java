
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalyzerJavascript;

import java_cup.runtime.*;
import Interfaz.Interfaz;
import java.util.ArrayList;
import LogicaFCA.Logica;
import LogicaFCA.VariableGlobal;
import LogicaFCA.DatosJs;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parserjs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parserjs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parserjs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parserjs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\007\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\005\010\000" +
    "\002\005\011\000\002\005\003\000\002\005\003\000\002" +
    "\040\005\000\002\040\006\000\002\040\006\000\002\040" +
    "\007\000\002\041\007\000\002\041\006\000\002\041\005" +
    "\000\002\041\004\000\002\041\011\000\002\041\012\000" +
    "\002\041\005\000\002\041\006\000\002\041\010\000\002" +
    "\041\011\000\002\006\005\000\002\006\003\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\012\005" +
    "\000\002\012\006\000\002\012\006\000\002\012\005\000" +
    "\002\012\005\000\002\012\006\000\002\012\006\000\002" +
    "\022\004\000\002\022\004\000\002\022\003\000\002\022" +
    "\003\000\002\022\004\000\002\022\004\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\007\007\000\002\007\006\000\002\007\011\000\002\007" +
    "\012\000\002\007\005\000\002\007\004\000\002\007\007" +
    "\000\002\007\006\000\002\007\011\000\002\007\012\000" +
    "\002\007\005\000\002\007\004\000\002\007\007\000\002" +
    "\007\006\000\002\007\011\000\002\007\012\000\002\007" +
    "\005\000\002\007\004\000\002\007\004\000\002\007\005" +
    "\000\002\007\005\000\002\007\006\000\002\007\010\000" +
    "\002\007\011\000\002\007\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\011\011\000\002\011" +
    "\013\000\002\011\012\000\002\011\012\000\002\011\014" +
    "\000\002\011\013\000\002\011\012\000\002\011\014\000" +
    "\002\011\013\000\002\015\006\000\002\015\010\000\002" +
    "\015\007\000\002\016\013\000\002\016\015\000\002\016" +
    "\014\000\002\016\012\000\002\016\014\000\002\016\013" +
    "\000\002\017\011\000\002\017\013\000\002\021\015\000" +
    "\002\021\014\000\002\023\004\000\002\023\004\000\002" +
    "\031\013\000\002\031\015\000\002\031\014\000\002\031" +
    "\016\000\002\031\015\000\002\031\017\000\002\031\016" +
    "\000\002\031\020\000\002\032\006\000\002\032\010\000" +
    "\002\033\014\000\002\033\013\000\002\034\004\000\002" +
    "\034\003\000\002\035\010\000\002\035\007\000\002\030" +
    "\005\000\002\030\004\000\002\030\004\000\002\030\003" +
    "\000\002\030\003\000\002\036\007\000\002\036\006\000" +
    "\002\037\004\000\002\037\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\006\003\006\010\007\001\002\000\004\002" +
    "\u015d\001\002\000\010\002\uffff\003\006\010\007\001\002" +
    "\000\004\002\ufffe\001\002\000\004\012\010\001\002\000" +
    "\004\004\011\001\002\000\014\003\017\012\016\020\014" +
    "\021\021\022\023\001\002\000\016\003\ufff7\005\ufff7\012" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\001\002\000\016\003\017" +
    "\005\ufffb\012\016\020\014\021\021\022\023\001\002\000" +
    "\004\012\uff9b\001\002\000\016\003\ufff6\005\ufff6\012\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\001\002\000\006\006\057\023" +
    "\056\001\002\000\004\005\ufffa\001\002\000\004\005\055" +
    "\001\002\000\004\012\uff9a\001\002\000\004\012\024\001" +
    "\002\000\004\012\uff99\001\002\000\022\003\uffee\005\uffee" +
    "\012\uffee\017\026\020\uffee\021\uffee\022\uffee\023\025\001" +
    "\002\000\016\012\027\013\032\014\035\024\033\025\030" +
    "\054\034\001\002\000\016\003\uffef\005\uffef\012\uffef\020" +
    "\uffef\021\uffef\022\uffef\001\002\000\060\003\uffc7\005\uffc7" +
    "\007\uffc7\012\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\036\uffc7\037\uffc7\040\uffc7\041\053\047\uffc7\051" +
    "\uffc7\053\uffc7\001\002\000\060\003\uffc5\005\uffc5\007\uffc5" +
    "\012\uffc5\015\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\051\047\uffc5\051\uffc5\053" +
    "\uffc5\001\002\000\020\003\ufff0\005\ufff0\012\ufff0\017\050" +
    "\020\ufff0\021\ufff0\022\ufff0\001\002\000\060\003\uffc3\005" +
    "\uffc3\007\uffc3\012\uffc3\015\uffc3\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\036\uffc3\037\uffc3\040\uffc3\041\046\047\uffc3" +
    "\051\uffc3\053\uffc3\001\002\000\060\003\uffc6\005\uffc6\007" +
    "\uffc6\012\uffc6\015\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\044\047\uffc6\051\uffc6" +
    "\053\uffc6\001\002\000\004\006\040\001\002\000\060\003" +
    "\uffc4\005\uffc4\007\uffc4\012\uffc4\015\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\036\uffc4\037\uffc4\040\uffc4\041\036" +
    "\047\uffc4\051\uffc4\053\uffc4\001\002\000\014\012\027\013" +
    "\032\014\035\024\033\025\030\001\002\000\056\003\uffc9" +
    "\005\uffc9\007\uffc9\012\uffc9\015\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\036\uffc9\037\uffc9\040\uffc9\047\uffc9\051" +
    "\uffc9\053\uffc9\001\002\000\014\012\027\013\032\014\035" +
    "\024\033\025\030\001\002\000\004\007\042\001\002\000" +
    "\020\003\uffed\005\uffed\012\uffed\017\043\020\uffed\021\uffed" +
    "\022\uffed\001\002\000\016\003\uffec\005\uffec\012\uffec\020" +
    "\uffec\021\uffec\022\uffec\001\002\000\014\012\027\013\032" +
    "\014\035\024\033\025\030\001\002\000\056\003\uffcb\005" +
    "\uffcb\007\uffcb\012\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\036\uffcb\037\uffcb\040\uffcb\047\uffcb\051\uffcb" +
    "\053\uffcb\001\002\000\014\012\027\013\032\014\035\024" +
    "\033\025\030\001\002\000\056\003\uffc8\005\uffc8\007\uffc8" +
    "\012\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\047\uffc8\051\uffc8\053\uffc8\001" +
    "\002\000\016\003\ufff1\005\ufff1\012\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\001\002\000\014\012\027\013\032\014\035\024" +
    "\033\025\030\001\002\000\056\003\uffca\005\uffca\007\uffca" +
    "\012\uffca\015\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\036\uffca\037\uffca\040\uffca\047\uffca\051\uffca\053\uffca\001" +
    "\002\000\014\012\027\013\032\014\035\024\033\025\030" +
    "\001\002\000\056\003\uffcc\005\uffcc\007\uffcc\012\uffcc\015" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\047\uffcc\051\uffcc\053\uffcc\001\002\000\010" +
    "\002\ufffd\003\ufffd\010\ufffd\001\002\000\016\012\027\013" +
    "\032\014\035\024\033\025\030\054\u0155\001\002\000\016" +
    "\007\062\012\027\013\032\014\035\024\033\025\030\001" +
    "\002\000\006\007\uffe6\015\uffe6\001\002\000\006\007\u0150" +
    "\015\377\001\002\000\022\003\ufff5\004\063\005\ufff5\012" +
    "\ufff5\017\064\020\ufff5\021\ufff5\022\ufff5\001\002\000\030" +
    "\003\103\012\072\020\110\021\105\022\101\026\073\036" +
    "\106\037\067\040\075\047\070\053\102\001\002\000\034" +
    "\003\ufff3\005\ufff3\012\ufff3\020\ufff3\021\ufff3\022\ufff3\026" +
    "\ufff3\036\ufff3\037\ufff3\040\ufff3\047\ufff3\051\ufff3\053\ufff3" +
    "\001\002\000\034\003\103\005\uffb8\012\072\020\110\021" +
    "\105\022\101\026\073\036\106\037\067\040\075\047\070" +
    "\051\uffb8\053\102\001\002\000\004\037\u0137\001\002\000" +
    "\004\006\u0120\001\002\000\004\006\u010c\001\002\000\034" +
    "\003\103\005\uffbb\012\072\020\110\021\105\022\101\026" +
    "\073\036\106\037\067\040\075\047\070\051\uffbb\053\102" +
    "\001\002\000\012\006\374\023\373\041\176\042\177\001" +
    "\002\000\004\006\266\001\002\000\034\003\103\005\uffb7" +
    "\012\072\020\110\021\105\022\101\026\073\036\106\037" +
    "\067\040\075\047\070\051\uffb7\053\102\001\002\000\004" +
    "\004\257\001\002\000\034\003\103\005\uffb6\012\072\020" +
    "\110\021\105\022\101\026\073\036\106\037\067\040\075" +
    "\047\070\051\uffb6\053\102\001\002\000\034\003\103\005" +
    "\uffb5\012\072\020\110\021\105\022\101\026\073\036\106" +
    "\037\067\040\075\047\070\051\uffb5\053\102\001\002\000" +
    "\034\003\103\005\uffba\012\072\020\110\021\105\022\101" +
    "\026\073\036\106\037\067\040\075\047\070\051\uffba\053" +
    "\102\001\002\000\004\012\242\001\002\000\004\006\227" +
    "\001\002\000\034\003\uff9c\005\uff9c\012\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\026\uff9c\036\uff9c\037\uff9c\040\uff9c\047\uff9c" +
    "\051\uff9c\053\uff9c\001\002\000\004\005\226\001\002\000" +
    "\004\012\214\001\002\000\004\006\124\001\002\000\034" +
    "\003\103\005\uffb9\012\072\020\110\021\105\022\101\026" +
    "\073\036\106\037\067\040\075\047\070\051\uffb9\053\102" +
    "\001\002\000\004\012\111\001\002\000\040\003\uffaf\005" +
    "\uffaf\012\uffaf\017\113\020\uffaf\021\uffaf\022\uffaf\023\112" +
    "\026\uffaf\036\uffaf\037\uffaf\040\uffaf\047\uffaf\051\uffaf\053" +
    "\uffaf\001\002\000\016\012\027\013\032\014\035\024\033" +
    "\025\030\054\115\001\002\000\034\003\uffb0\005\uffb0\012" +
    "\uffb0\020\uffb0\021\uffb0\022\uffb0\026\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\047\uffb0\051\uffb0\053\uffb0\001\002\000\036\003" +
    "\uffb3\005\uffb3\012\uffb3\017\122\020\uffb3\021\uffb3\022\uffb3" +
    "\026\uffb3\036\uffb3\037\uffb3\040\uffb3\047\uffb3\051\uffb3\053" +
    "\uffb3\001\002\000\004\006\116\001\002\000\014\012\027" +
    "\013\032\014\035\024\033\025\030\001\002\000\004\007" +
    "\120\001\002\000\036\003\uffb2\005\uffb2\012\uffb2\017\121" +
    "\020\uffb2\021\uffb2\022\uffb2\026\uffb2\036\uffb2\037\uffb2\040" +
    "\uffb2\047\uffb2\051\uffb2\053\uffb2\001\002\000\034\003\uffb1" +
    "\005\uffb1\012\uffb1\020\uffb1\021\uffb1\022\uffb1\026\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\047\uffb1\051\uffb1\053\uffb1\001\002" +
    "\000\034\003\uffb4\005\uffb4\012\uffb4\020\uffb4\021\uffb4\022" +
    "\uffb4\026\uffb4\036\uffb4\037\uffb4\040\uffb4\047\uffb4\051\uffb4" +
    "\053\uffb4\001\002\000\006\005\uffc0\051\uffc0\001\002\000" +
    "\012\012\125\020\014\021\021\022\023\001\002\000\004" +
    "\023\203\001\002\000\004\012\137\001\002\000\004\007" +
    "\130\001\002\000\004\004\131\001\002\000\030\003\103" +
    "\012\072\020\110\021\105\022\101\026\073\036\106\037" +
    "\067\040\075\047\070\053\102\001\002\000\006\005\133" +
    "\051\134\001\002\000\034\003\uff86\005\uff86\012\uff86\020" +
    "\uff86\021\uff86\022\uff86\026\uff86\036\uff86\037\uff86\040\uff86" +
    "\047\uff86\051\uff86\053\uff86\001\002\000\004\017\135\001" +
    "\002\000\004\005\136\001\002\000\034\003\uff85\005\uff85" +
    "\012\uff85\020\uff85\021\uff85\022\uff85\026\uff85\036\uff85\037" +
    "\uff85\040\uff85\047\uff85\051\uff85\053\uff85\001\002\000\004" +
    "\023\140\001\002\000\012\003\142\012\141\013\144\014" +
    "\146\001\002\000\032\007\uff60\012\uff60\013\uff60\014\uff60" +
    "\016\uff60\017\uff60\041\uff60\042\uff60\043\uff60\044\uff60\045" +
    "\uff60\046\uff60\001\002\000\014\007\uff6c\012\uff6c\013\uff6c" +
    "\014\uff6c\017\uff6c\001\002\000\012\012\141\013\144\014" +
    "\146\017\157\001\002\000\032\007\uff62\012\uff62\013\uff62" +
    "\014\uff62\016\uff62\017\uff62\041\uff62\042\uff62\043\uff62\044" +
    "\uff62\045\uff62\046\uff62\001\002\000\030\007\uff6d\012\uff6d" +
    "\013\uff6d\014\uff6d\017\uff6d\041\147\042\153\043\155\044" +
    "\152\045\150\046\151\001\002\000\032\007\uff61\012\uff61" +
    "\013\uff61\014\uff61\016\uff61\017\uff61\041\uff61\042\uff61\043" +
    "\uff61\044\uff61\045\uff61\046\uff61\001\002\000\032\007\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\017\uffd5\024\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\001\002\000\032" +
    "\007\uffd1\012\uffd1\013\uffd1\014\uffd1\017\uffd1\024\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\001\002" +
    "\000\032\007\uffd0\012\uffd0\013\uffd0\014\uffd0\017\uffd0\024" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\001\002\000\032\007\uffd2\012\uffd2\013\uffd2\014\uffd2\017" +
    "\uffd2\024\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\001\002\000\032\007\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\017\uffd4\024\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\001\002\000\014\007\uff6f\012\uff6f\013" +
    "\uff6f\014\uff6f\017\uff6f\001\002\000\032\007\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\017\uffd3\024\uffd3\041\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\001\002\000\030\007\uff6e" +
    "\012\uff6e\013\uff6e\014\uff6e\017\uff6e\041\147\042\153\043" +
    "\155\044\152\045\150\046\151\001\002\000\004\012\160" +
    "\001\002\000\012\023\162\027\163\030\164\031\165\001" +
    "\002\000\012\003\142\012\141\013\144\014\146\001\002" +
    "\000\004\023\171\001\002\000\004\023\170\001\002\000" +
    "\014\003\uffd9\012\uffd9\013\uffd9\014\uffd9\023\167\001\002" +
    "\000\014\003\uffd8\012\uffd8\013\uffd8\014\uffd8\023\166\001" +
    "\002\000\012\003\uffd6\012\uffd6\013\uffd6\014\uffd6\001\002" +
    "\000\012\003\uffd7\012\uffd7\013\uffd7\014\uffd7\001\002\000" +
    "\012\003\uffda\012\uffda\013\uffda\014\uffda\001\002\000\012" +
    "\003\uffdb\012\uffdb\013\uffdb\014\uffdb\001\002\000\012\012" +
    "\141\013\144\014\146\017\173\001\002\000\004\012\174" +
    "\001\002\000\006\041\176\042\177\001\002\000\004\007" +
    "\uff84\001\002\000\004\041\201\001\002\000\004\042\200" +
    "\001\002\000\040\003\uff81\005\uff81\007\uff81\012\uff81\017" +
    "\uff81\020\uff81\021\uff81\022\uff81\026\uff81\036\uff81\037\uff81" +
    "\040\uff81\047\uff81\051\uff81\053\uff81\001\002\000\040\003" +
    "\uff82\005\uff82\007\uff82\012\uff82\017\uff82\020\uff82\021\uff82" +
    "\022\uff82\026\uff82\036\uff82\037\uff82\040\uff82\047\uff82\051" +
    "\uff82\053\uff82\001\002\000\014\007\uff70\012\uff70\013\uff70" +
    "\014\uff70\017\uff70\001\002\000\012\003\142\012\141\013" +
    "\144\014\146\001\002\000\012\012\141\013\144\014\146" +
    "\017\205\001\002\000\004\012\206\001\002\000\012\023" +
    "\162\027\163\030\164\031\165\001\002\000\012\003\142" +
    "\012\141\013\144\014\146\001\002\000\012\012\141\013" +
    "\144\014\146\017\211\001\002\000\004\012\212\001\002" +
    "\000\006\041\176\042\177\001\002\000\004\007\uff83\001" +
    "\002\000\040\003\uffa9\005\uffa9\012\uffa9\017\216\020\uffa9" +
    "\021\uffa9\022\uffa9\023\215\026\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\047\uffa9\051\uffa9\053\uffa9\001\002\000\016\012\027" +
    "\013\032\014\035\024\033\025\030\054\220\001\002\000" +
    "\034\003\uffaa\005\uffaa\012\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\026\uffaa\036\uffaa\037\uffaa\040\uffaa\047\uffaa\051\uffaa\053" +
    "\uffaa\001\002\000\036\003\uffad\005\uffad\012\uffad\017\225" +
    "\020\uffad\021\uffad\022\uffad\026\uffad\036\uffad\037\uffad\040" +
    "\uffad\047\uffad\051\uffad\053\uffad\001\002\000\004\006\221" +
    "\001\002\000\014\012\027\013\032\014\035\024\033\025" +
    "\030\001\002\000\004\007\223\001\002\000\036\003\uffac" +
    "\005\uffac\012\uffac\017\224\020\uffac\021\uffac\022\uffac\026" +
    "\uffac\036\uffac\037\uffac\040\uffac\047\uffac\051\uffac\053\uffac" +
    "\001\002\000\034\003\uffab\005\uffab\012\uffab\020\uffab\021" +
    "\uffab\022\uffab\026\uffab\036\uffab\037\uffab\040\uffab\047\uffab" +
    "\051\uffab\053\uffab\001\002\000\034\003\uffae\005\uffae\012" +
    "\uffae\020\uffae\021\uffae\022\uffae\026\uffae\036\uffae\037\uffae" +
    "\040\uffae\047\uffae\051\uffae\053\uffae\001\002\000\016\003" +
    "\ufff9\005\ufff9\012\ufff9\020\ufff9\021\ufff9\022\ufff9\001\002" +
    "\000\026\012\234\013\232\014\230\024\235\041\147\042" +
    "\153\043\155\044\152\045\150\046\151\001\002\000\030" +
    "\007\uff66\012\uff66\013\uff66\014\uff66\024\uff66\041\uff66\042" +
    "\uff66\043\uff66\044\uff66\045\uff66\046\uff66\001\002\000\030" +
    "\007\uff63\012\uff63\013\uff63\014\uff63\024\uff63\041\uff63\042" +
    "\uff63\043\uff63\044\uff63\045\uff63\046\uff63\001\002\000\030" +
    "\007\uff67\012\uff67\013\uff67\014\uff67\024\uff67\041\uff67\042" +
    "\uff67\043\uff67\044\uff67\045\uff67\046\uff67\001\002\000\030" +
    "\007\uff68\012\234\013\232\014\230\024\235\041\147\042" +
    "\153\043\155\044\152\045\150\046\151\001\002\000\030" +
    "\007\uff65\012\uff65\013\uff65\014\uff65\024\uff65\041\uff65\042" +
    "\uff65\043\uff65\044\uff65\045\uff65\046\uff65\001\002\000\030" +
    "\007\uff64\012\uff64\013\uff64\014\uff64\024\uff64\041\uff64\042" +
    "\uff64\043\uff64\044\uff64\045\uff64\046\uff64\001\002\000\004" +
    "\007\237\001\002\000\036\003\uff6a\005\uff6a\012\uff6a\017" +
    "\240\020\uff6a\021\uff6a\022\uff6a\026\uff6a\036\uff6a\037\uff6a" +
    "\040\uff6a\047\uff6a\051\uff6a\053\uff6a\001\002\000\034\003" +
    "\uff6b\005\uff6b\012\uff6b\020\uff6b\021\uff6b\022\uff6b\026\uff6b" +
    "\036\uff6b\037\uff6b\040\uff6b\047\uff6b\051\uff6b\053\uff6b\001" +
    "\002\000\004\007\uff69\001\002\000\040\003\uffa3\005\uffa3" +
    "\012\uffa3\017\244\020\uffa3\021\uffa3\022\uffa3\023\243\026" +
    "\uffa3\036\uffa3\037\uffa3\040\uffa3\047\uffa3\051\uffa3\053\uffa3" +
    "\001\002\000\016\012\027\013\032\014\035\024\033\025" +
    "\030\054\246\001\002\000\034\003\uffa4\005\uffa4\012\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\026\uffa4\036\uffa4\037\uffa4\040" +
    "\uffa4\047\uffa4\051\uffa4\053\uffa4\001\002\000\036\003\uffa7" +
    "\005\uffa7\012\uffa7\017\253\020\uffa7\021\uffa7\022\uffa7\026" +
    "\uffa7\036\uffa7\037\uffa7\040\uffa7\047\uffa7\051\uffa7\053\uffa7" +
    "\001\002\000\004\006\247\001\002\000\014\012\027\013" +
    "\032\014\035\024\033\025\030\001\002\000\004\007\251" +
    "\001\002\000\036\003\uffa6\005\uffa6\012\uffa6\017\252\020" +
    "\uffa6\021\uffa6\022\uffa6\026\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\047\uffa6\051\uffa6\053\uffa6\001\002\000\034\003\uffa5\005" +
    "\uffa5\012\uffa5\020\uffa5\021\uffa5\022\uffa5\026\uffa5\036\uffa5" +
    "\037\uffa5\040\uffa5\047\uffa5\051\uffa5\053\uffa5\001\002\000" +
    "\034\003\uffa8\005\uffa8\012\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\026\uffa8\036\uffa8\037\uffa8\040\uffa8\047\uffa8\051\uffa8\053" +
    "\uffa8\001\002\000\006\005\uffc1\051\uffc1\001\002\000\006" +
    "\005\uffbd\051\uffbd\001\002\000\006\005\uffbc\051\uffbc\001" +
    "\002\000\030\003\103\012\072\020\110\021\105\022\101" +
    "\026\073\036\106\037\067\040\075\047\070\053\102\001" +
    "\002\000\006\005\261\051\262\001\002\000\004\037\uff78" +
    "\001\002\000\004\017\263\001\002\000\004\005\264\001" +
    "\002\000\004\037\uff77\001\002\000\006\005\uffbe\051\uffbe" +
    "\001\002\000\016\011\267\012\027\013\032\014\035\024" +
    "\033\025\030\001\002\000\016\011\267\012\027\013\032" +
    "\014\035\024\033\025\030\001\002\000\004\007\315\001" +
    "\002\000\010\007\uffe3\032\311\033\312\001\002\000\012" +
    "\023\273\027\274\030\275\031\276\001\002\000\004\023" +
    "\307\001\002\000\004\023\305\001\002\000\016\012\027" +
    "\013\032\014\035\023\303\024\033\025\030\001\002\000" +
    "\016\012\027\013\032\014\035\023\300\024\033\025\030" +
    "\001\002\000\010\007\uffde\032\uffde\033\uffde\001\002\000" +
    "\014\012\027\013\032\014\035\024\033\025\030\001\002" +
    "\000\010\007\uffdc\032\uffdc\033\uffdc\001\002\000\010\007" +
    "\uffdf\032\uffdf\033\uffdf\001\002\000\014\012\027\013\032" +
    "\014\035\024\033\025\030\001\002\000\010\007\uffdd\032" +
    "\uffdd\033\uffdd\001\002\000\014\012\027\013\032\014\035" +
    "\024\033\025\030\001\002\000\010\007\uffe0\032\uffe0\033" +
    "\uffe0\001\002\000\014\012\027\013\032\014\035\024\033" +
    "\025\030\001\002\000\010\007\uffe1\032\uffe1\033\uffe1\001" +
    "\002\000\016\011\267\012\027\013\032\014\035\024\033" +
    "\025\030\001\002\000\016\011\267\012\027\013\032\014" +
    "\035\024\033\025\030\001\002\000\004\007\uffe4\001\002" +
    "\000\004\007\uffe5\001\002\000\004\004\316\001\002\000" +
    "\032\003\103\012\072\020\110\021\105\022\101\026\073" +
    "\036\106\037\067\040\075\047\070\051\317\053\102\001" +
    "\002\000\004\017\364\001\002\000\006\005\321\051\322" +
    "\001\002\000\036\003\uff98\005\uff98\012\uff98\020\uff98\021" +
    "\uff98\022\uff98\026\uff98\035\326\036\uff98\037\uff98\040\uff98" +
    "\047\uff98\051\uff98\053\uff98\001\002\000\004\017\323\001" +
    "\002\000\004\005\324\001\002\000\036\003\uff97\005\uff97" +
    "\012\uff97\020\uff97\021\uff97\022\uff97\026\uff97\035\326\036" +
    "\uff97\037\uff97\040\uff97\047\uff97\051\uff97\053\uff97\001\002" +
    "\000\034\003\uff91\005\uff91\012\uff91\020\uff91\021\uff91\022" +
    "\uff91\026\uff91\036\uff91\037\uff91\040\uff91\047\uff91\051\uff91" +
    "\053\uff91\001\002\000\006\004\330\026\331\001\002\000" +
    "\034\003\uff94\005\uff94\012\uff94\020\uff94\021\uff94\022\uff94" +
    "\026\uff94\036\uff94\037\uff94\040\uff94\047\uff94\051\uff94\053" +
    "\uff94\001\002\000\032\003\103\012\072\020\110\021\105" +
    "\022\101\026\073\036\106\037\067\040\075\047\070\051" +
    "\352\053\102\001\002\000\004\006\332\001\002\000\016" +
    "\011\267\012\027\013\032\014\035\024\033\025\030\001" +
    "\002\000\004\007\334\001\002\000\004\004\335\001\002" +
    "\000\032\003\103\012\072\020\110\021\105\022\101\026" +
    "\073\036\106\037\067\040\075\047\070\051\336\053\102" +
    "\001\002\000\004\017\347\001\002\000\006\005\340\051" +
    "\341\001\002\000\036\003\uff89\005\uff89\012\uff89\020\uff89" +
    "\021\uff89\022\uff89\026\uff89\035\345\036\uff89\037\uff89\040" +
    "\uff89\047\uff89\051\uff89\053\uff89\001\002\000\004\017\342" +
    "\001\002\000\004\005\343\001\002\000\036\003\uff88\005" +
    "\uff88\012\uff88\020\uff88\021\uff88\022\uff88\026\uff88\035\345" +
    "\036\uff88\037\uff88\040\uff88\047\uff88\051\uff88\053\uff88\001" +
    "\002\000\034\003\uff8b\005\uff8b\012\uff8b\020\uff8b\021\uff8b" +
    "\022\uff8b\026\uff8b\036\uff8b\037\uff8b\040\uff8b\047\uff8b\051" +
    "\uff8b\053\uff8b\001\002\000\004\026\331\001\002\000\034" +
    "\003\uff8c\005\uff8c\012\uff8c\020\uff8c\021\uff8c\022\uff8c\026" +
    "\uff8c\036\uff8c\037\uff8c\040\uff8c\047\uff8c\051\uff8c\053\uff8c" +
    "\001\002\000\004\005\350\001\002\000\036\003\uff87\005" +
    "\uff87\012\uff87\020\uff87\021\uff87\022\uff87\026\uff87\035\345" +
    "\036\uff87\037\uff87\040\uff87\047\uff87\051\uff87\053\uff87\001" +
    "\002\000\034\003\uff8a\005\uff8a\012\uff8a\020\uff8a\021\uff8a" +
    "\022\uff8a\026\uff8a\036\uff8a\037\uff8a\040\uff8a\047\uff8a\051" +
    "\uff8a\053\uff8a\001\002\000\004\017\360\001\002\000\006" +
    "\005\354\051\355\001\002\000\034\003\uff8f\005\uff8f\012" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\026\uff8f\036\uff8f\037\uff8f" +
    "\040\uff8f\047\uff8f\051\uff8f\053\uff8f\001\002\000\004\017" +
    "\356\001\002\000\004\005\357\001\002\000\034\003\uff8e" +
    "\005\uff8e\012\uff8e\020\uff8e\021\uff8e\022\uff8e\026\uff8e\036" +
    "\uff8e\037\uff8e\040\uff8e\047\uff8e\051\uff8e\053\uff8e\001\002" +
    "\000\004\005\361\001\002\000\034\003\uff8d\005\uff8d\012" +
    "\uff8d\020\uff8d\021\uff8d\022\uff8d\026\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\047\uff8d\051\uff8d\053\uff8d\001\002\000\034\003" +
    "\uff92\005\uff92\012\uff92\020\uff92\021\uff92\022\uff92\026\uff92" +
    "\036\uff92\037\uff92\040\uff92\047\uff92\051\uff92\053\uff92\001" +
    "\002\000\034\003\uff95\005\uff95\012\uff95\020\uff95\021\uff95" +
    "\022\uff95\026\uff95\036\uff95\037\uff95\040\uff95\047\uff95\051" +
    "\uff95\053\uff95\001\002\000\004\005\365\001\002\000\036" +
    "\003\uff96\005\uff96\012\uff96\020\uff96\021\uff96\022\uff96\026" +
    "\uff96\035\326\036\uff96\037\uff96\040\uff96\047\uff96\051\uff96" +
    "\053\uff96\001\002\000\034\003\uff90\005\uff90\012\uff90\020" +
    "\uff90\021\uff90\022\uff90\026\uff90\036\uff90\037\uff90\040\uff90" +
    "\047\uff90\051\uff90\053\uff90\001\002\000\034\003\uff93\005" +
    "\uff93\012\uff93\020\uff93\021\uff93\022\uff93\026\uff93\036\uff93" +
    "\037\uff93\040\uff93\047\uff93\051\uff93\053\uff93\001\002\000" +
    "\004\007\371\001\002\000\010\007\uffe2\032\uffe2\033\uffe2" +
    "\001\002\000\036\003\uffa2\005\uffa2\012\uffa2\017\u010a\020" +
    "\uffa2\021\uffa2\022\uffa2\026\uffa2\036\uffa2\037\uffa2\040\uffa2" +
    "\047\uffa2\051\uffa2\053\uffa2\001\002\000\016\012\027\013" +
    "\032\014\035\024\033\025\030\054\u0104\001\002\000\016" +
    "\007\376\012\027\013\032\014\035\024\033\025\030\001" +
    "\002\000\006\007\u0100\015\377\001\002\000\036\003\ufff5" +
    "\005\ufff5\012\ufff5\017\064\020\ufff5\021\ufff5\022\ufff5\026" +
    "\ufff5\036\ufff5\037\ufff5\040\ufff5\047\ufff5\051\ufff5\053\ufff5" +
    "\001\002\000\014\012\027\013\032\014\035\024\033\025" +
    "\030\001\002\000\036\003\ufff4\005\ufff4\012\ufff4\017\u0101" +
    "\020\ufff4\021\ufff4\022\ufff4\026\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\047\ufff4\051\ufff4\053\ufff4\001\002\000\034\003\ufff2" +
    "\005\ufff2\012\ufff2\020\ufff2\021\ufff2\022\ufff2\026\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\047\ufff2\051\ufff2\053\ufff2\001\002" +
    "\000\006\007\uffe7\015\uffe7\001\002\000\036\003\uffa0\005" +
    "\uffa0\012\uffa0\017\u0109\020\uffa0\021\uffa0\022\uffa0\026\uffa0" +
    "\036\uffa0\037\uffa0\040\uffa0\047\uffa0\051\uffa0\053\uffa0\001" +
    "\002\000\004\006\u0105\001\002\000\014\012\027\013\032" +
    "\014\035\024\033\025\030\001\002\000\004\007\u0107\001" +
    "\002\000\036\003\uff9e\005\uff9e\012\uff9e\017\u0108\020\uff9e" +
    "\021\uff9e\022\uff9e\026\uff9e\036\uff9e\037\uff9e\040\uff9e\047" +
    "\uff9e\051\uff9e\053\uff9e\001\002\000\034\003\uff9d\005\uff9d" +
    "\012\uff9d\020\uff9d\021\uff9d\022\uff9d\026\uff9d\036\uff9d\037" +
    "\uff9d\040\uff9d\047\uff9d\051\uff9d\053\uff9d\001\002\000\034" +
    "\003\uff9f\005\uff9f\012\uff9f\020\uff9f\021\uff9f\022\uff9f\026" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\047\uff9f\051\uff9f\053\uff9f" +
    "\001\002\000\034\003\uffa1\005\uffa1\012\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\026\uffa1\036\uffa1\037\uffa1\040\uffa1\047\uffa1" +
    "\051\uffa1\053\uffa1\001\002\000\006\005\uffc2\051\uffc2\001" +
    "\002\000\004\012\u010d\001\002\000\004\007\u010e\001\002" +
    "\000\004\004\u010f\001\002\000\004\050\u0112\001\002\000" +
    "\004\052\u011b\001\002\000\006\050\u0112\052\uff73\001\002" +
    "\000\010\012\141\013\144\014\146\001\002\000\004\016" +
    "\u0114\001\002\000\032\003\103\012\072\020\110\021\105" +
    "\022\101\026\073\036\106\037\067\040\075\047\070\051" +
    "\u0115\053\102\001\002\000\004\017\u0119\001\002\000\004" +
    "\051\u0117\001\002\000\004\017\u0118\001\002\000\006\050" +
    "\uff72\052\uff72\001\002\000\006\050\uff71\052\uff71\001\002" +
    "\000\004\052\uff74\001\002\000\004\016\u011c\001\002\000" +
    "\032\003\103\005\u011d\012\072\020\110\021\105\022\101" +
    "\026\073\036\106\037\067\040\075\047\070\053\102\001" +
    "\002\000\034\003\uff75\005\uff75\012\uff75\020\uff75\021\uff75" +
    "\022\uff75\026\uff75\036\uff75\037\uff75\040\uff75\047\uff75\051" +
    "\uff75\053\uff75\001\002\000\004\005\u011f\001\002\000\034" +
    "\003\uff76\005\uff76\012\uff76\020\uff76\021\uff76\022\uff76\026" +
    "\uff76\036\uff76\037\uff76\040\uff76\047\uff76\051\uff76\053\uff76" +
    "\001\002\000\006\011\u0122\012\u0121\001\002\000\012\023" +
    "\162\027\163\030\164\031\165\001\002\000\004\012\u0123" +
    "\001\002\000\012\023\162\027\163\030\164\031\165\001" +
    "\002\000\012\003\142\012\141\013\144\014\146\001\002" +
    "\000\012\007\u0126\012\141\013\144\014\146\001\002\000" +
    "\004\007\u0127\001\002\000\004\004\u0128\001\002\000\030" +
    "\003\103\012\072\020\110\021\105\022\101\026\073\036" +
    "\106\037\067\040\075\047\070\053\102\001\002\000\006" +
    "\005\u012a\051\u012b\001\002\000\034\003\uff7c\005\uff7c\012" +
    "\uff7c\020\uff7c\021\uff7c\022\uff7c\026\uff7c\036\uff7c\037\uff7c" +
    "\040\uff7c\047\uff7c\051\uff7c\053\uff7c\001\002\000\004\017" +
    "\u012c\001\002\000\004\005\u012d\001\002\000\034\003\uff7b" +
    "\005\uff7b\012\uff7b\020\uff7b\021\uff7b\022\uff7b\026\uff7b\036" +
    "\uff7b\037\uff7b\040\uff7b\047\uff7b\051\uff7b\053\uff7b\001\002" +
    "\000\012\003\142\012\141\013\144\014\146\001\002\000" +
    "\012\007\u0130\012\141\013\144\014\146\001\002\000\004" +
    "\004\u0131\001\002\000\030\003\103\012\072\020\110\021" +
    "\105\022\101\026\073\036\106\037\067\040\075\047\070" +
    "\053\102\001\002\000\006\005\u0133\051\u0134\001\002\000" +
    "\034\003\uff80\005\uff80\012\uff80\020\uff80\021\uff80\022\uff80" +
    "\026\uff80\036\uff80\037\uff80\040\uff80\047\uff80\051\uff80\053" +
    "\uff80\001\002\000\004\017\u0135\001\002\000\004\005\u0136" +
    "\001\002\000\034\003\uff7f\005\uff7f\012\uff7f\020\uff7f\021" +
    "\uff7f\022\uff7f\026\uff7f\036\uff7f\037\uff7f\040\uff7f\047\uff7f" +
    "\051\uff7f\053\uff7f\001\002\000\004\006\u0138\001\002\000" +
    "\006\011\u013a\012\u0139\001\002\000\012\023\162\027\163" +
    "\030\164\031\165\001\002\000\004\012\u013b\001\002\000" +
    "\012\023\162\027\163\030\164\031\165\001\002\000\012" +
    "\003\142\012\141\013\144\014\146\001\002\000\012\007" +
    "\u013e\012\141\013\144\014\146\001\002\000\004\007\u013f" +
    "\001\002\000\004\004\u0140\001\002\000\030\003\103\012" +
    "\072\020\110\021\105\022\101\026\073\036\106\037\067" +
    "\040\075\047\070\053\102\001\002\000\006\005\u0142\051" +
    "\u0143\001\002\000\034\003\uff7a\005\uff7a\012\uff7a\020\uff7a" +
    "\021\uff7a\022\uff7a\026\uff7a\036\uff7a\037\uff7a\040\uff7a\047" +
    "\uff7a\051\uff7a\053\uff7a\001\002\000\004\017\u0144\001\002" +
    "\000\004\005\u0145\001\002\000\034\003\uff79\005\uff79\012" +
    "\uff79\020\uff79\021\uff79\022\uff79\026\uff79\036\uff79\037\uff79" +
    "\040\uff79\047\uff79\051\uff79\053\uff79\001\002\000\012\003" +
    "\142\012\141\013\144\014\146\001\002\000\012\007\u0148" +
    "\012\141\013\144\014\146\001\002\000\004\004\u0149\001" +
    "\002\000\030\003\103\012\072\020\110\021\105\022\101" +
    "\026\073\036\106\037\067\040\075\047\070\053\102\001" +
    "\002\000\006\005\u014b\051\u014c\001\002\000\034\003\uff7e" +
    "\005\uff7e\012\uff7e\020\uff7e\021\uff7e\022\uff7e\026\uff7e\036" +
    "\uff7e\037\uff7e\040\uff7e\047\uff7e\051\uff7e\053\uff7e\001\002" +
    "\000\004\017\u014d\001\002\000\004\005\u014e\001\002\000" +
    "\034\003\uff7d\005\uff7d\012\uff7d\020\uff7d\021\uff7d\022\uff7d" +
    "\026\uff7d\036\uff7d\037\uff7d\040\uff7d\047\uff7d\051\uff7d\053" +
    "\uff7d\001\002\000\006\005\uffbf\051\uffbf\001\002\000\022" +
    "\003\ufff4\004\u0151\005\ufff4\012\ufff4\017\u0101\020\ufff4\021" +
    "\ufff4\022\ufff4\001\002\000\030\003\103\012\072\020\110" +
    "\021\105\022\101\026\073\036\106\037\067\040\075\047" +
    "\070\053\102\001\002\000\004\005\u0153\001\002\000\016" +
    "\003\ufff8\005\ufff8\012\ufff8\020\ufff8\021\ufff8\022\ufff8\001" +
    "\002\000\020\003\uffeb\005\uffeb\012\uffeb\017\u015a\020\uffeb" +
    "\021\uffeb\022\uffeb\001\002\000\004\006\u0156\001\002\000" +
    "\014\012\027\013\032\014\035\024\033\025\030\001\002" +
    "\000\004\007\u0158\001\002\000\020\003\uffe9\005\uffe9\012" +
    "\uffe9\017\u0159\020\uffe9\021\uffe9\022\uffe9\001\002\000\016" +
    "\003\uffe8\005\uffe8\012\uffe8\020\uffe8\021\uffe8\022\uffe8\001" +
    "\002\000\016\003\uffea\005\uffea\012\uffea\020\uffea\021\uffea" +
    "\022\uffea\001\002\000\004\005\ufffc\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\002\u015b\003\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\017\005" +
    "\012\020\021\040\011\041\014\001\001\000\002\001\001" +
    "\000\014\004\u015a\005\012\020\021\040\011\041\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\036\001\001\000\002\001\001\000\004\013\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\044\001\001\000\002\001\001\000\004\013\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\051\001\001\000\002\001\001\000\004\013\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u0153\001" +
    "\001\000\006\006\060\013\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\070\010" +
    "\103\011\077\017\106\031\064\032\065\033\073\036\076" +
    "\040\075\001\001\000\002\001\001\000\024\007\070\010" +
    "\u014e\011\077\017\106\031\064\032\065\033\073\036\076" +
    "\040\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\070\010\u010a\011\077\017\106" +
    "\031\064\032\065\033\073\036\076\040\075\001\001\000" +
    "\004\023\371\001\001\000\002\001\001\000\024\007\070" +
    "\010\264\011\077\017\106\031\064\032\065\033\073\036" +
    "\076\040\075\001\001\000\002\001\001\000\024\007\070" +
    "\010\255\011\077\017\106\031\064\032\065\033\073\036" +
    "\076\040\075\001\001\000\024\007\070\010\254\011\077" +
    "\017\106\031\064\032\065\033\073\036\076\040\075\001" +
    "\001\000\024\007\070\010\253\011\077\017\106\031\064" +
    "\032\065\033\073\036\076\040\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\070\010" +
    "\122\011\077\017\106\031\064\032\065\033\073\036\076" +
    "\040\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\125\021\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\070\010\131\011\077\017\106\031" +
    "\064\032\065\033\073\036\076\040\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\144" +
    "\030\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\155\001\001\000\002\001\001\000\004\024\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\201\001" +
    "\001\000\002\001\001\000\004\022\160\001\001\000\006" +
    "\026\144\030\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\155\001\001\000\002\001\001\000\004\023\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\144\030\203\001\001\000\004\026\155\001" +
    "\001\000\002\001\001\000\004\022\206\001\001\000\006" +
    "\026\144\030\207\001\001\000\004\026\155\001\001\000" +
    "\002\001\001\000\004\023\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\230" +
    "\027\232\037\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\024\230\027\232\037\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\070\010\257\011\077\017" +
    "\106\031\064\032\065\033\073\036\076\040\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\270\013\271\014\267\001\001\000\006\012\367\013" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\301\001\001\000\004\013\276\001\001\000\002\001\001" +
    "\000\004\013\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\303\001\001\000\002\001\001\000\004" +
    "\013\305\001\001\000\002\001\001\000\004\013\307\001" +
    "\001\000\002\001\001\000\010\012\270\013\271\014\313" +
    "\001\001\000\010\012\270\013\271\014\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\007\070\010\317\011\077\017\106\031\064\032\065\033" +
    "\073\036\076\040\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\362\016\361\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\326\016\324\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\070\010\352\011\077\017\106\031\064\032\065" +
    "\033\073\036\076\040\075\001\001\000\002\001\001\000" +
    "\010\012\270\013\271\014\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\070\010\336\011\077\017" +
    "\106\031\064\032\065\033\073\036\076\040\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\343" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\350\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\366\016\365" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0102" +
    "\001\001\000\006\006\374\013\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\u010f\035" +
    "\u0110\001\001\000\002\001\001\000\006\034\u0119\035\u0110" +
    "\001\001\000\004\026\u0112\001\001\000\002\001\001\000" +
    "\024\007\070\010\u0115\011\077\017\106\031\064\032\065" +
    "\033\073\036\076\040\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\070\010\u011d\011\077\017\106\031\064\032\065\033\073" +
    "\036\076\040\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u012d" +
    "\001\001\000\002\001\001\000\004\022\u0123\001\001\000" +
    "\006\026\144\030\u0124\001\001\000\004\026\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\007\070\010" +
    "\u0128\011\077\017\106\031\064\032\065\033\073\036\076" +
    "\040\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\144\030\u012e\001\001\000\004\026\155\001\001\000" +
    "\002\001\001\000\024\007\070\010\u0131\011\077\017\106" +
    "\031\064\032\065\033\073\036\076\040\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\u0145\001\001\000\002\001\001\000\004" +
    "\022\u013b\001\001\000\006\026\144\030\u013c\001\001\000" +
    "\004\026\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\007\070\010\u0140\011\077\017\106\031\064\032" +
    "\065\033\073\036\076\040\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\144\030\u0146\001\001\000\004" +
    "\026\155\001\001\000\002\001\001\000\024\007\070\010" +
    "\u0149\011\077\017\106\031\064\032\065\033\073\036\076" +
    "\040\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\070\010\u0151\011" +
    "\077\017\106\031\064\032\065\033\073\036\076\040\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parserjs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parserjs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parserjs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/*Method that is called when parser can be recovered METODO QUE SE LLAMA AUTOMATICAMENTE ANTE ALGUN ERROR SINTACICO*/
	public void syntax_error(Symbol s){ 
        
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintacticojs Recuperado");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna); 
        Interfaz.Consolelog("Unexpected token: " +s.value); 

    }

	/*Method that is called when parser can't be recovered*/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
     
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintacticojs, Modo Panico");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna);
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parserjs$actions {


    ArrayList<String> idvariables = new ArrayList<>();
    Logica logic= new Logica();
    

  private final Parserjs parser;

  /** Constructor */
  CUP$Parserjs$actions(Parserjs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parserjs$do_action_part00000000(
    int                        CUP$Parserjs$act_num,
    java_cup.runtime.lr_parser CUP$Parserjs$parser,
    java.util.Stack            CUP$Parserjs$stack,
    int                        CUP$Parserjs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parserjs$result;

      /* select the action based on the action number */
      switch (CUP$Parserjs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).value;
		RESULT = start_val;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parserjs$parser.done_parsing();
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= generalinstruction ini 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= generalinstruction 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= error 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // generalinstruction ::= CLASS CARACTERESVARIABLES LLALEFT instructionrecursive LLARIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		logic.variablesjs(idvariables);System.out.println(idvariables);
                                                                            System.out.println("numero fila clase: "+aright+" numero fila llave "+bright);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("generalinstruction",1, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instructionrecursive ::= instruction instructionrecursive 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instructionrecursive",2, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instructionrecursive ::= instruction 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instructionrecursive",2, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instructionrecursive ::= error 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instructionrecursive",2, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= CARACTERESVARIABLES PARLEFT PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).value;
		System.out.println("filasf: "+aleft+"columnas "+aright);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= CARACTERESVARIABLES PARLEFT recibirparametros PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).value;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction ::= llamada 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= variablesglobales 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // llamada ::= CARACTERESVARIABLES PARLEFT PARRIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("llamada",30, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // llamada ::= CARACTERESVARIABLES PARLEFT recibirparametros PARRIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("llamada",30, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // llamada ::= CARACTERESVARIABLES PARLEFT PARRIGHT PCOMA 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("llamada",30, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // llamada ::= CARACTERESVARIABLES PARLEFT recibirparametros PARRIGHT PCOMA 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("llamada",30, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variablesglobales ::= tiposvar CARACTERESVARIABLES IGUAL typevariable PCOMA 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesglobales",31, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // variablesglobales ::= tiposvar CARACTERESVARIABLES IGUAL typevariable 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesglobales",31, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variablesglobales ::= tiposvar CARACTERESVARIABLES PCOMA 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesglobales",31, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variablesglobales ::= tiposvar CARACTERESVARIABLES 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesglobales",31, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variablesglobales ::= tiposvar CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesglobales",31, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variablesglobales ::= tiposvar CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesglobales",31, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variablesglobales ::= CARACTERESVARIABLES IGUAL typevariable 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesglobales",31, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variablesglobales ::= CARACTERESVARIABLES IGUAL typevariable PCOMA 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesglobales",31, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variablesglobales ::= CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesglobales",31, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variablesglobales ::= CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA 
            {
              ArrayList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesglobales",31, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // recibirparametros ::= recibirparametros COMA typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirparametros",4, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // recibirparametros ::= typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirparametros",4, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // relacionconosinoperador ::= recibirrelacion AND relacionconosinoperador 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("relacionconosinoperador",10, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // relacionconosinoperador ::= recibirrelacion OR relacionconosinoperador 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("relacionconosinoperador",10, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // relacionconosinoperador ::= recibirrelacion 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("relacionconosinoperador",10, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // recibirrelacion ::= NOTPAR recibirrelacion PARRIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // recibirrelacion ::= typevariable IGUAL IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // recibirrelacion ::= typevariable ADMIR IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // recibirrelacion ::= typevariable MENOR typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // recibirrelacion ::= typevariable MAYOR typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // recibirrelacion ::= typevariable MENOR IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // recibirrelacion ::= typevariable MAYOR IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operadoresrelacionales ::= IGUAL IGUAL 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operadoresrelacionales ::= ADMIR IGUAL 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operadoresrelacionales ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // operadoresrelacionales ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operadoresrelacionales ::= MENOR IGUAL 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operadoresrelacionales ::= MAYOR IGUAL 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operadoresaritmeticos ::= MAS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operadoresaritmeticos ::= MENOS 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operadoresaritmeticos ::= POR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operadoresaritmeticos ::= DIVISION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operadoresaritmeticos ::= POTENCIA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operadoresaritmeticos ::= MODULO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operadoreslogicos ::= AND 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoreslogicos",19, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operadoreslogicos ::= OR 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoreslogicos",19, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operadoreslogicos ::= NEGACION 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoreslogicos",19, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // typevariable ::= CARACTERESVARIABLES MAS typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // typevariable ::= CADCOM MAS typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // typevariable ::= CADCOMSIM MAS typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // typevariable ::= DECIMAL MAS typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // typevariable ::= NUMBER MAS typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // typevariable ::= CARACTERESVARIABLES 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // typevariable ::= CADCOM 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // typevariable ::= CADCOMSIM 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // typevariable ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // typevariable ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variablesrecursivas ::= variables variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variablesrecursivas ::= sentenciaif variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variablesrecursivas ::= sentenciafor variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variablesrecursivas ::= sentenciawhile variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variablesrecursivas ::= sentenciaswitch variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variablesrecursivas ::= consolelog variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variablesrecursivas ::= llamada variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variablesrecursivas ::= variables 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variablesrecursivas ::= sentenciaif 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variablesrecursivas ::= sentenciafor 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variablesrecursivas ::= sentenciawhile 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variablesrecursivas ::= sentenciaswitch 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variablesrecursivas ::= llamada 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variablesrecursivas ::= consolelog 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variables ::= VAR CARACTERESVARIABLES IGUAL typevariable PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variables ::= VAR CARACTERESVARIABLES IGUAL typevariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variables ::= VAR CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variables ::= VAR CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variables ::= VAR CARACTERESVARIABLES PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variables ::= VAR CARACTERESVARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variables ::= LET CARACTERESVARIABLES IGUAL typevariable PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variables ::= LET CARACTERESVARIABLES IGUAL typevariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // variables ::= LET CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // variables ::= LET CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // variables ::= LET CARACTERESVARIABLES PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // variables ::= LET CARACTERESVARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // variables ::= CONST CARACTERESVARIABLES IGUAL typevariable PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // variables ::= CONST CARACTERESVARIABLES IGUAL typevariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variables ::= CONST CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // variables ::= CONST CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variables ::= CONST CARACTERESVARIABLES PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variables ::= CONST CARACTERESVARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variables ::= CARACTERESVARIABLES aumentodecremento 
            {
              String RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variables ::= CARACTERESVARIABLES aumentodecremento PCOMA 
            {
              String RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variables ::= CARACTERESVARIABLES IGUAL typevariable 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variables ::= CARACTERESVARIABLES IGUAL typevariable PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variables ::= CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variables ::= CARACTERESVARIABLES IGUAL REQUIRE PARLEFT typevariable PARRIGHT PCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).value;
		idvariables.add(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variables ::= error 
            {
              String RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tiposvar ::= VAR 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("tiposvar",14, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tiposvar ::= LET 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("tiposvar",14, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tiposvar ::= CONST 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("tiposvar",14, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-8)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT sentenciaelse 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT sentenciaelse 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-9)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT BREAK PCOMA LLARIGHT sentenciaelse 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-8)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT sentenciaelseif 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT sentenciaelseif 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-9)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT BREAK PCOMA LLARIGHT sentenciaelseif 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-8)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sentenciaelse ::= ELSE LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelse",11, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // sentenciaelse ::= ELSE LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelse",11, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // sentenciaelse ::= ELSE LLALEFT BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelse",11, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // sentenciaelseif ::= ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT sentenciaelseif 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelseif",12, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-8)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentenciaelseif ::= ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT sentenciaelseif 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelseif",12, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-10)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentenciaelseif ::= ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT BREAK PCOMA LLARIGHT sentenciaelseif 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelseif",12, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-9)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentenciaelseif ::= ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelseif",12, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentenciaelseif ::= ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelseif",12, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-9)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentenciaelseif ::= ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelseif",12, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-8)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentenciafor ::= FOR PARLEFT instruccionfor PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciafor",13, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentenciafor ::= FOR PARLEFT instruccionfor PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciafor",13, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-8)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // instruccionfor ::= tiposvar CARACTERESVARIABLES IGUAL oprecursivas PCOMA CARACTERESVARIABLES operadoresrelacionales oprecursivas PCOMA CARACTERESVARIABLES aumentodecremento 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instruccionfor",15, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-10)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // instruccionfor ::= CARACTERESVARIABLES IGUAL oprecursivas PCOMA CARACTERESVARIABLES operadoresrelacionales oprecursivas PCOMA CARACTERESVARIABLES aumentodecremento 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instruccionfor",15, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-9)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // aumentodecremento ::= MAS MAS 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("aumentodecremento",17, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // aumentodecremento ::= MENOS MENOS 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("aumentodecremento",17, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // sentenciawhile ::= WHILE PARLEFT CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",23, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-8)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // sentenciawhile ::= WHILE PARLEFT CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",23, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-10)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // sentenciawhile ::= sentenciadowhile WHILE PARLEFT CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",23, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-9)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // sentenciawhile ::= sentenciadowhile WHILE PARLEFT CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",23, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-11)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // sentenciawhile ::= WHILE PARLEFT NOTPAR CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",23, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-10)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // sentenciawhile ::= WHILE PARLEFT NOTPAR CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",23, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-12)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // sentenciawhile ::= sentenciadowhile WHILE PARLEFT NOTPAR CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",23, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-11)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // sentenciawhile ::= sentenciadowhile WHILE PARLEFT NOTPAR CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT PARRIGHT LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",23, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-13)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // sentenciadowhile ::= DO LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciadowhile",24, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // sentenciadowhile ::= DO LLALEFT variablesrecursivas BREAK PCOMA LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciadowhile",24, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentenciaswitch ::= SWITCH PARLEFT CARACTERESVARIABLES PARRIGHT LLALEFT recursivecase DEFAULT DOSPUNTOS variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaswitch",25, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-9)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentenciaswitch ::= SWITCH PARLEFT CARACTERESVARIABLES PARRIGHT LLALEFT recursivecase DEFAULT DOSPUNTOS LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaswitch",25, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-8)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // recursivecase ::= caseswitch recursivecase 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recursivecase",26, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // recursivecase ::= caseswitch 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recursivecase",26, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // caseswitch ::= CASE typenumberovariable DOSPUNTOS variablesrecursivas BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("caseswitch",27, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // caseswitch ::= CASE typenumberovariable DOSPUNTOS BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("caseswitch",27, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // oprecursivas ::= oprecursivas typenumberovariable operadoresaritmeticos 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("oprecursivas",22, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // oprecursivas ::= typenumberovariable operadoresaritmeticos 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("oprecursivas",22, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // oprecursivas ::= oprecursivas typenumberovariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("oprecursivas",22, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // oprecursivas ::= typenumberovariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("oprecursivas",22, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // oprecursivas ::= error 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("oprecursivas",22, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // consolelog ::= PRINT PARLEFT recursiveprints PARRIGHT PCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)).value;
		Interfaz.Consolelog(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("consolelog",28, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // consolelog ::= PRINT PARLEFT recursiveprints PARRIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).value;
		Interfaz.Consolelog(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("consolelog",28, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // recursiveprints ::= prints recursiveprints 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).value;
		RESULT=exp;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recursiveprints",29, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // recursiveprints ::= prints 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=exp;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recursiveprints",29, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // prints ::= NUMBER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("prints",21, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // prints ::= DECIMAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("prints",21, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // prints ::= CARACTERESVARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("prints",21, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // prints ::= CADCOM 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("prints",21, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // prints ::= operadoresaritmeticos 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("prints",21, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // typenumberovariable ::= NUMBER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typenumberovariable",20, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // typenumberovariable ::= DECIMAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typenumberovariable",20, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // typenumberovariable ::= CARACTERESVARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typenumberovariable",20, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parserjs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parserjs$do_action(
    int                        CUP$Parserjs$act_num,
    java_cup.runtime.lr_parser CUP$Parserjs$parser,
    java.util.Stack            CUP$Parserjs$stack,
    int                        CUP$Parserjs$top)
    throws java.lang.Exception
    {
              return CUP$Parserjs$do_action_part00000000(
                               CUP$Parserjs$act_num,
                               CUP$Parserjs$parser,
                               CUP$Parserjs$stack,
                               CUP$Parserjs$top);
    }
}

}
