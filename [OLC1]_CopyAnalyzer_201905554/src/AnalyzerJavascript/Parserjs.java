
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalyzerJavascript;

import java_cup.runtime.*;
import Interfaz.Interfaz;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parserjs extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parserjs() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parserjs(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parserjs(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\007\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\005\010\000" +
    "\002\005\011\000\002\006\005\000\002\006\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\003\000\002\012\006\000\002\012\006\000\002\012\005" +
    "\000\002\012\005\000\002\012\006\000\002\012\006\000" +
    "\002\022\004\000\002\022\004\000\002\022\003\000\002" +
    "\022\003\000\002\022\004\000\002\022\004\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\007" +
    "\007\000\002\007\006\000\002\007\007\000\002\007\006" +
    "\000\002\007\007\000\002\007\006\000\002\007\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\011\011\000\002\011\012\000\002\011\012\000\002\015" +
    "\006\000\002\016\013\000\002\016\012\000\002\017\011" +
    "\000\002\021\015\000\002\021\014\000\002\023\004\000" +
    "\002\023\004\000\002\030\013\000\002\030\014\000\002" +
    "\030\015\000\002\030\016\000\002\031\006\000\002\032" +
    "\014\000\002\033\004\000\002\033\003\000\002\034\010" +
    "\000\002\027\005\000\002\027\004\000\002\027\004\000" +
    "\002\027\003\000\002\027\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\035\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\006\003\006\010\007\001\002\000\004\002" +
    "\343\001\002\000\010\002\uffff\003\006\010\007\001\002" +
    "\000\004\002\ufffe\001\002\000\004\012\010\001\002\000" +
    "\004\004\011\001\002\000\006\003\014\012\013\001\002" +
    "\000\010\003\014\005\ufffb\012\013\001\002\000\004\006" +
    "\017\001\002\000\004\005\ufffa\001\002\000\004\005\016" +
    "\001\002\000\010\002\ufffd\003\ufffd\010\ufffd\001\002\000" +
    "\006\007\022\012\020\001\002\000\006\007\ufff6\015\ufff6" +
    "\001\002\000\006\007\334\015\333\001\002\000\004\004" +
    "\023\001\002\000\026\003\040\020\045\021\041\022\036" +
    "\026\031\036\043\037\026\040\033\047\030\053\037\001" +
    "\002\000\032\003\040\005\uffce\020\045\021\041\022\036" +
    "\026\031\036\043\037\026\040\033\047\030\051\uffce\053" +
    "\037\001\002\000\004\037\310\001\002\000\004\006\267" +
    "\001\002\000\032\003\040\005\uffd1\020\045\021\041\022" +
    "\036\026\031\036\043\037\026\040\033\047\030\051\uffd1" +
    "\053\037\001\002\000\004\006\245\001\002\000\004\006" +
    "\172\001\002\000\032\003\040\005\uffcd\020\045\021\041" +
    "\022\036\026\031\036\043\037\026\040\033\047\030\051" +
    "\uffcd\053\037\001\002\000\004\004\166\001\002\000\032" +
    "\003\040\005\uffcc\020\045\021\041\022\036\026\031\036" +
    "\043\037\026\040\033\047\030\051\uffcc\053\037\001\002" +
    "\000\032\003\040\005\uffd0\020\045\021\041\022\036\026" +
    "\031\036\043\037\026\040\033\047\030\051\uffd0\053\037" +
    "\001\002\000\004\012\160\001\002\000\004\006\155\001" +
    "\002\000\032\003\uffc5\005\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\026\uffc5\036\uffc5\037\uffc5\040\uffc5\047\uffc5\051\uffc5\053" +
    "\uffc5\001\002\000\004\012\151\001\002\000\004\005\150" +
    "\001\002\000\004\006\060\001\002\000\032\003\040\005" +
    "\uffcf\020\045\021\041\022\036\026\031\036\043\037\026" +
    "\040\033\047\030\051\uffcf\053\037\001\002\000\004\012" +
    "\046\001\002\000\004\023\047\001\002\000\014\012\050" +
    "\013\053\014\055\024\054\025\051\001\002\000\054\003" +
    "\uffdc\005\uffdc\007\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\036\uffdc\037\uffdc\040\uffdc\047\uffdc\051\uffdc" +
    "\053\uffdc\001\002\000\054\003\uffda\005\uffda\007\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\023\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\036\uffda\037" +
    "\uffda\040\uffda\047\uffda\051\uffda\053\uffda\001\002\000\034" +
    "\003\uffca\005\uffca\017\056\020\uffca\021\uffca\022\uffca\026" +
    "\uffca\036\uffca\037\uffca\040\uffca\047\uffca\051\uffca\053\uffca" +
    "\001\002\000\054\003\uffd8\005\uffd8\007\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\047\uffd8\051\uffd8\053\uffd8\001\002\000\054\003\uffdb" +
    "\005\uffdb\007\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\036\uffdb\037\uffdb\040\uffdb\047\uffdb\051\uffdb\053" +
    "\uffdb\001\002\000\054\003\uffd9\005\uffd9\007\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\047\uffd9\051\uffd9\053\uffd9\001\002\000\032\003" +
    "\uffcb\005\uffcb\020\uffcb\021\uffcb\022\uffcb\026\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\047\uffcb\051\uffcb\053\uffcb\001\002\000" +
    "\006\005\uffd5\051\uffd5\001\002\000\012\012\063\020\061" +
    "\021\064\022\062\001\002\000\004\012\uffc4\001\002\000" +
    "\004\012\uffc2\001\002\000\004\023\137\001\002\000\004" +
    "\012\uffc3\001\002\000\004\012\073\001\002\000\004\007" +
    "\067\001\002\000\004\004\070\001\002\000\026\003\040" +
    "\020\045\021\041\022\036\026\031\036\043\037\026\040" +
    "\033\047\030\053\037\001\002\000\004\005\072\001\002" +
    "\000\032\003\uffbb\005\uffbb\020\uffbb\021\uffbb\022\uffbb\026" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\047\uffbb\051\uffbb\053\uffbb" +
    "\001\002\000\004\023\074\001\002\000\012\003\076\012" +
    "\075\013\100\014\102\001\002\000\032\007\uffa6\012\uffa6" +
    "\013\uffa6\014\uffa6\016\uffa6\017\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\001\002\000\014\007\uffa9" +
    "\012\uffa9\013\uffa9\014\uffa9\017\uffa9\001\002\000\012\012" +
    "\075\013\100\014\102\017\113\001\002\000\032\007\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\016\uffa8\017\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\001\002\000\030" +
    "\007\uffaa\012\uffaa\013\uffaa\014\uffaa\017\uffaa\041\103\042" +
    "\107\043\111\044\106\045\104\046\105\001\002\000\032" +
    "\007\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7\017\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\001\002" +
    "\000\014\007\uffe5\012\uffe5\013\uffe5\014\uffe5\017\uffe5\001" +
    "\002\000\014\007\uffe1\012\uffe1\013\uffe1\014\uffe1\017\uffe1" +
    "\001\002\000\014\007\uffe0\012\uffe0\013\uffe0\014\uffe0\017" +
    "\uffe0\001\002\000\014\007\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\017\uffe2\001\002\000\014\007\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\017\uffe4\001\002\000\014\007\uffac\012\uffac\013\uffac" +
    "\014\uffac\017\uffac\001\002\000\014\007\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\017\uffe3\001\002\000\030\007\uffab\012\uffab" +
    "\013\uffab\014\uffab\017\uffab\041\103\042\107\043\111\044" +
    "\106\045\104\046\105\001\002\000\004\012\114\001\002" +
    "\000\012\023\116\027\117\030\120\031\121\001\002\000" +
    "\012\003\076\012\075\013\100\014\102\001\002\000\004" +
    "\023\125\001\002\000\004\023\124\001\002\000\014\003" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\023\123\001\002\000\014" +
    "\003\uffe8\012\uffe8\013\uffe8\014\uffe8\023\122\001\002\000" +
    "\012\003\uffe6\012\uffe6\013\uffe6\014\uffe6\001\002\000\012" +
    "\003\uffe7\012\uffe7\013\uffe7\014\uffe7\001\002\000\012\003" +
    "\uffea\012\uffea\013\uffea\014\uffea\001\002\000\012\003\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\001\002\000\012\012\075\013" +
    "\100\014\102\017\127\001\002\000\004\012\130\001\002" +
    "\000\006\041\132\042\133\001\002\000\004\007\uffba\001" +
    "\002\000\004\041\135\001\002\000\004\042\134\001\002" +
    "\000\004\007\uffb7\001\002\000\004\007\uffb8\001\002\000" +
    "\014\007\uffad\012\uffad\013\uffad\014\uffad\017\uffad\001\002" +
    "\000\012\003\076\012\075\013\100\014\102\001\002\000" +
    "\012\012\075\013\100\014\102\017\141\001\002\000\004" +
    "\012\142\001\002\000\012\023\116\027\117\030\120\031" +
    "\121\001\002\000\012\003\076\012\075\013\100\014\102" +
    "\001\002\000\012\012\075\013\100\014\102\017\145\001" +
    "\002\000\004\012\146\001\002\000\006\041\132\042\133" +
    "\001\002\000\004\007\uffb9\001\002\000\010\003\ufff9\005" +
    "\ufff9\012\ufff9\001\002\000\004\023\152\001\002\000\014" +
    "\012\050\013\053\014\055\024\054\025\051\001\002\000" +
    "\034\003\uffc8\005\uffc8\017\154\020\uffc8\021\uffc8\022\uffc8" +
    "\026\uffc8\036\uffc8\037\uffc8\040\uffc8\047\uffc8\051\uffc8\053" +
    "\uffc8\001\002\000\032\003\uffc9\005\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\026\uffc9\036\uffc9\037\uffc9\040\uffc9\047\uffc9\051" +
    "\uffc9\053\uffc9\001\002\000\010\012\075\013\100\014\102" +
    "\001\002\000\004\007\157\001\002\000\032\003\uffa5\005" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\026\uffa5\036\uffa5\037\uffa5" +
    "\040\uffa5\047\uffa5\051\uffa5\053\uffa5\001\002\000\004\023" +
    "\161\001\002\000\014\012\050\013\053\014\055\024\054" +
    "\025\051\001\002\000\034\003\uffc6\005\uffc6\017\163\020" +
    "\uffc6\021\uffc6\022\uffc6\026\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\047\uffc6\051\uffc6\053\uffc6\001\002\000\032\003\uffc7\005" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\026\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\047\uffc7\051\uffc7\053\uffc7\001\002\000\006\005" +
    "\uffd6\051\uffd6\001\002\000\006\005\uffd2\051\uffd2\001\002" +
    "\000\026\003\040\020\045\021\041\022\036\026\031\036" +
    "\043\037\026\040\033\047\030\053\037\001\002\000\004" +
    "\005\170\001\002\000\004\037\uffb2\001\002\000\006\005" +
    "\uffd3\051\uffd3\001\002\000\014\012\050\013\053\014\055" +
    "\024\054\025\051\001\002\000\012\023\227\027\230\030" +
    "\231\031\232\001\002\000\004\007\204\001\002\000\012" +
    "\007\ufff2\032\176\033\200\034\177\001\002\000\014\012" +
    "\050\013\053\014\055\024\054\025\051\001\002\000\014" +
    "\012\050\013\053\014\055\024\054\025\051\001\002\000" +
    "\014\012\050\013\053\014\055\024\054\025\051\001\002" +
    "\000\004\007\ufff4\001\002\000\004\007\ufff3\001\002\000" +
    "\004\007\ufff5\001\002\000\004\004\205\001\002\000\026" +
    "\003\040\020\045\021\041\022\036\026\031\036\043\037" +
    "\026\040\033\047\030\053\037\001\002\000\004\005\207" +
    "\001\002\000\034\003\uffc1\005\uffc1\020\uffc1\021\uffc1\022" +
    "\uffc1\026\uffc1\035\211\036\uffc1\037\uffc1\040\uffc1\047\uffc1" +
    "\051\uffc1\053\uffc1\001\002\000\032\003\uffbf\005\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\026\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\047\uffbf\051\uffbf\053\uffbf\001\002\000\006\004\213\026" +
    "\214\001\002\000\032\003\uffc0\005\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\026\uffc0\036\uffc0\037\uffc0\040\uffc0\047\uffc0\051" +
    "\uffc0\053\uffc0\001\002\000\026\003\040\020\045\021\041" +
    "\022\036\026\031\036\043\037\026\040\033\047\030\053" +
    "\037\001\002\000\004\006\215\001\002\000\014\012\050" +
    "\013\053\014\055\024\054\025\051\001\002\000\004\007" +
    "\217\001\002\000\004\004\220\001\002\000\026\003\040" +
    "\020\045\021\041\022\036\026\031\036\043\037\026\040" +
    "\033\047\030\053\037\001\002\000\004\005\222\001\002" +
    "\000\034\003\uffbc\005\uffbc\020\uffbc\021\uffbc\022\uffbc\026" +
    "\uffbc\035\224\036\uffbc\037\uffbc\040\uffbc\047\uffbc\051\uffbc" +
    "\053\uffbc\001\002\000\032\003\uffbd\005\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\026\uffbd\036\uffbd\037\uffbd\040\uffbd\047\uffbd" +
    "\051\uffbd\053\uffbd\001\002\000\004\026\214\001\002\000" +
    "\004\005\226\001\002\000\032\003\uffbe\005\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\026\uffbe\036\uffbe\037\uffbe\040\uffbe\047" +
    "\uffbe\051\uffbe\053\uffbe\001\002\000\004\023\243\001\002" +
    "\000\004\023\241\001\002\000\016\012\050\013\053\014" +
    "\055\023\237\024\054\025\051\001\002\000\016\012\050" +
    "\013\053\014\055\023\234\024\054\025\051\001\002\000" +
    "\012\007\uffee\032\uffee\033\uffee\034\uffee\001\002\000\014" +
    "\012\050\013\053\014\055\024\054\025\051\001\002\000" +
    "\012\007\uffec\032\uffec\033\uffec\034\uffec\001\002\000\012" +
    "\007\uffef\032\uffef\033\uffef\034\uffef\001\002\000\014\012" +
    "\050\013\053\014\055\024\054\025\051\001\002\000\012" +
    "\007\uffed\032\uffed\033\uffed\034\uffed\001\002\000\014\012" +
    "\050\013\053\014\055\024\054\025\051\001\002\000\012" +
    "\007\ufff0\032\ufff0\033\ufff0\034\ufff0\001\002\000\014\012" +
    "\050\013\053\014\055\024\054\025\051\001\002\000\012" +
    "\007\ufff1\032\ufff1\033\ufff1\034\ufff1\001\002\000\004\012" +
    "\246\001\002\000\004\007\247\001\002\000\004\004\250" +
    "\001\002\000\004\050\253\001\002\000\004\052\262\001" +
    "\002\000\006\050\253\052\uffaf\001\002\000\010\012\075" +
    "\013\100\014\102\001\002\000\004\016\255\001\002\000" +
    "\026\003\040\020\045\021\041\022\036\026\031\036\043" +
    "\037\026\040\033\047\030\053\037\001\002\000\004\051" +
    "\257\001\002\000\004\017\260\001\002\000\006\050\uffae" +
    "\052\uffae\001\002\000\004\052\uffb0\001\002\000\004\016" +
    "\263\001\002\000\026\003\040\020\045\021\041\022\036" +
    "\026\031\036\043\037\026\040\033\047\030\053\037\001" +
    "\002\000\004\005\265\001\002\000\032\003\uffb1\005\uffb1" +
    "\020\uffb1\021\uffb1\022\uffb1\026\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\047\uffb1\051\uffb1\053\uffb1\001\002\000\006\005\uffd7" +
    "\051\uffd7\001\002\000\006\011\271\012\270\001\002\000" +
    "\012\023\116\027\117\030\120\031\121\001\002\000\004" +
    "\012\272\001\002\000\012\023\116\027\117\030\120\031" +
    "\121\001\002\000\012\003\076\012\075\013\100\014\102" +
    "\001\002\000\012\007\275\012\075\013\100\014\102\001" +
    "\002\000\004\007\276\001\002\000\004\004\277\001\002" +
    "\000\026\003\040\020\045\021\041\022\036\026\031\036" +
    "\043\037\026\040\033\047\030\053\037\001\002\000\004" +
    "\005\301\001\002\000\032\003\uffb4\005\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\026\uffb4\036\uffb4\037\uffb4\040\uffb4\047\uffb4" +
    "\051\uffb4\053\uffb4\001\002\000\012\003\076\012\075\013" +
    "\100\014\102\001\002\000\012\007\304\012\075\013\100" +
    "\014\102\001\002\000\004\004\305\001\002\000\026\003" +
    "\040\020\045\021\041\022\036\026\031\036\043\037\026" +
    "\040\033\047\030\053\037\001\002\000\004\005\307\001" +
    "\002\000\032\003\uffb6\005\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\026\uffb6\036\uffb6\037\uffb6\040\uffb6\047\uffb6\051\uffb6\053" +
    "\uffb6\001\002\000\004\006\311\001\002\000\006\011\313" +
    "\012\312\001\002\000\012\023\116\027\117\030\120\031" +
    "\121\001\002\000\004\012\314\001\002\000\012\023\116" +
    "\027\117\030\120\031\121\001\002\000\012\003\076\012" +
    "\075\013\100\014\102\001\002\000\012\007\317\012\075" +
    "\013\100\014\102\001\002\000\004\007\320\001\002\000" +
    "\004\004\321\001\002\000\026\003\040\020\045\021\041" +
    "\022\036\026\031\036\043\037\026\040\033\047\030\053" +
    "\037\001\002\000\004\005\323\001\002\000\032\003\uffb3" +
    "\005\uffb3\020\uffb3\021\uffb3\022\uffb3\026\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\047\uffb3\051\uffb3\053\uffb3\001\002\000\012" +
    "\003\076\012\075\013\100\014\102\001\002\000\012\007" +
    "\326\012\075\013\100\014\102\001\002\000\004\004\327" +
    "\001\002\000\026\003\040\020\045\021\041\022\036\026" +
    "\031\036\043\037\026\040\033\047\030\053\037\001\002" +
    "\000\004\005\331\001\002\000\032\003\uffb5\005\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\026\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\047\uffb5\051\uffb5\053\uffb5\001\002\000\006\005\uffd4\051" +
    "\uffd4\001\002\000\004\012\340\001\002\000\004\004\335" +
    "\001\002\000\026\003\040\020\045\021\041\022\036\026" +
    "\031\036\043\037\026\040\033\047\030\053\037\001\002" +
    "\000\004\005\337\001\002\000\010\003\ufff8\005\ufff8\012" +
    "\ufff8\001\002\000\006\007\ufff7\015\ufff7\001\002\000\004" +
    "\005\ufffc\001\002\000\004\002\000\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\341\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\002\341\003\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\014\005" +
    "\011\001\001\000\006\004\340\005\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\026\010\041\011" +
    "\034\017\043\030\023\031\024\032\031\035\033\001\001" +
    "\000\022\007\026\010\331\011\034\017\043\030\023\031" +
    "\024\032\031\035\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\026\010\265\011\034\017\043\030" +
    "\023\031\024\032\031\035\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\007\026\010\170\011\034\017" +
    "\043\030\023\031\024\032\031\035\033\001\001\000\002" +
    "\001\001\000\022\007\026\010\164\011\034\017\043\030" +
    "\023\031\024\032\031\035\033\001\001\000\022\007\026" +
    "\010\163\011\034\017\043\030\023\031\024\032\031\035" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\026\010\056\011\034\017\043\030\023" +
    "\031\024\032\031\035\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\051\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\064\021\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\007\026\010\070\011\034\017\043\030\023\031\024" +
    "\032\031\035\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\100\027\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\111\001" +
    "\001\000\002\001\001\000\004\024\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\135\001\001\000\002\001" +
    "\001\000\004\022\114\001\001\000\006\026\100\027\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\111\001" +
    "\001\000\002\001\001\000\004\023\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\100" +
    "\027\137\001\001\000\004\026\111\001\001\000\002\001" +
    "\001\000\004\022\142\001\001\000\006\026\100\027\143" +
    "\001\001\000\004\026\111\001\001\000\002\001\001\000" +
    "\004\023\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\007\026\010\166\011" +
    "\034\017\043\030\023\031\024\032\031\035\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\174\013\172\014\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\174\013" +
    "\172\014\202\001\001\000\010\012\174\013\172\014\201" +
    "\001\001\000\010\012\174\013\172\014\200\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\007\026\010\205\011\034\017\043\030" +
    "\023\031\024\032\031\035\033\001\001\000\002\001\001" +
    "\000\006\015\211\016\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\026\010\224" +
    "\011\034\017\043\030\023\031\024\032\031\035\033\001" +
    "\001\000\002\001\001\000\010\012\174\013\172\014\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\026\010\220\011\034\017\043\030\023\031\024\032\031" +
    "\035\033\001\001\000\002\001\001\000\004\016\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\235\001\001\000\004\013\232\001\001\000\002" +
    "\001\001\000\004\013\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\237\001\001\000\002\001\001" +
    "\000\004\013\241\001\001\000\002\001\001\000\004\013" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\250\034\251\001" +
    "\001\000\002\001\001\000\006\033\260\034\251\001\001" +
    "\000\004\026\253\001\001\000\002\001\001\000\022\007" +
    "\026\010\255\011\034\017\043\030\023\031\024\032\031" +
    "\035\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\007\026\010\263\011\034\017\043\030\023\031\024\032" +
    "\031\035\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\301\001" +
    "\001\000\002\001\001\000\004\022\272\001\001\000\006" +
    "\026\100\027\273\001\001\000\004\026\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\007\026\010\277" +
    "\011\034\017\043\030\023\031\024\032\031\035\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\100" +
    "\027\302\001\001\000\004\026\111\001\001\000\002\001" +
    "\001\000\022\007\026\010\305\011\034\017\043\030\023" +
    "\031\024\032\031\035\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\323\001\001\000\002\001\001\000\004\022\314\001" +
    "\001\000\006\026\100\027\315\001\001\000\004\026\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\007" +
    "\026\010\321\011\034\017\043\030\023\031\024\032\031" +
    "\035\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\100\027\324\001\001\000\004\026\111\001\001" +
    "\000\002\001\001\000\022\007\026\010\327\011\034\017" +
    "\043\030\023\031\024\032\031\035\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\007\026\010\335\011\034" +
    "\017\043\030\023\031\024\032\031\035\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parserjs$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parserjs$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parserjs$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/*Method that is called when parser can be recovered METODO QUE SE LLAMA AUTOMATICAMENTE ANTE ALGUN ERROR SINTACICO*/
	public void syntax_error(Symbol s){ 
        
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintacticojs Recuperado");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna); 
        Interfaz.Consolelog("Unexpected token: " +s.value); 

    }

	/*Method that is called when parser can't be recovered*/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
     
        int fila = s.right;
        int columna = s.left;
        
        Interfaz.Consolelog("Error Sintacticojs, Modo Panico");
        Interfaz.Consolelog("\t\tLexema: "+s.value); 
        Interfaz.Consolelog("\t\tFila: "+fila); 
        Interfaz.Consolelog("\t\tColumna: "+columna);
    } 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parserjs$actions {


 

  private final Parserjs parser;

  /** Constructor */
  CUP$Parserjs$actions(Parserjs parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parserjs$do_action_part00000000(
    int                        CUP$Parserjs$act_num,
    java_cup.runtime.lr_parser CUP$Parserjs$parser,
    java.util.Stack            CUP$Parserjs$stack,
    int                        CUP$Parserjs$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parserjs$result;

      /* select the action based on the action number */
      switch (CUP$Parserjs$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).value;
		RESULT = start_val;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parserjs$parser.done_parsing();
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= generalinstruction ini 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= generalinstruction 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ini ::= error 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // generalinstruction ::= CLASS CARACTERESVARIABLES LLALEFT instructionrecursive LLARIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)).value;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("generalinstruction",1, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instructionrecursive ::= instruction instructionrecursive 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instructionrecursive",2, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instructionrecursive ::= instruction 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instructionrecursive",2, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instructionrecursive ::= error 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instructionrecursive",2, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruction ::= CARACTERESVARIABLES PARLEFT PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)).value;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction ::= CARACTERESVARIABLES PARLEFT recibirparametros PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)).value;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instruction",3, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // recibirparametros ::= recibirparametros COMA CARACTERESVARIABLES 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirparametros",4, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // recibirparametros ::= CARACTERESVARIABLES 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirparametros",4, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // relacionconosinoperador ::= recibirrelacion AND relacionconosinoperador 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("relacionconosinoperador",10, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // relacionconosinoperador ::= recibirrelacion OR relacionconosinoperador 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("relacionconosinoperador",10, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // relacionconosinoperador ::= recibirrelacion NEGACION relacionconosinoperador 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("relacionconosinoperador",10, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // relacionconosinoperador ::= recibirrelacion 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("relacionconosinoperador",10, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // recibirrelacion ::= typevariable IGUAL IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // recibirrelacion ::= typevariable ADMIR IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // recibirrelacion ::= typevariable MENOR typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // recibirrelacion ::= typevariable MAYOR typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // recibirrelacion ::= typevariable MENOR IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // recibirrelacion ::= typevariable MAYOR IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recibirrelacion",8, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operadoresrelacionales ::= IGUAL IGUAL 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadoresrelacionales ::= ADMIR IGUAL 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadoresrelacionales ::= MENOR 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operadoresrelacionales ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operadoresrelacionales ::= MENOR IGUAL 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operadoresrelacionales ::= MAYOR IGUAL 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresrelacionales",16, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operadoresaritmeticos ::= MAS 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operadoresaritmeticos ::= MENOS 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operadoresaritmeticos ::= POR 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operadoresaritmeticos ::= DIVISION 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operadoresaritmeticos ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operadoresaritmeticos ::= MODULO 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoresaritmeticos",18, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operadoreslogicos ::= AND 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoreslogicos",19, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operadoreslogicos ::= OR 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoreslogicos",19, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operadoreslogicos ::= NEGACION 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("operadoreslogicos",19, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // typevariable ::= CARACTERESVARIABLES 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // typevariable ::= CADCOM 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // typevariable ::= CADCOMSIM 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // typevariable ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // typevariable ::= NUMBER 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typevariable",9, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variablesrecursivas ::= variables variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variablesrecursivas ::= sentenciaif variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variablesrecursivas ::= sentenciafor variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variablesrecursivas ::= sentenciawhile variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variablesrecursivas ::= sentenciaswitch variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variablesrecursivas ::= consolelog variablesrecursivas 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variablesrecursivas ::= variables 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variablesrecursivas ::= sentenciaif 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variablesrecursivas ::= sentenciafor 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variablesrecursivas ::= sentenciawhile 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variablesrecursivas ::= sentenciaswitch 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variablesrecursivas ::= consolelog 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variablesrecursivas",6, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variables ::= VAR CARACTERESVARIABLES IGUAL typevariable PCOMA 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variables ::= VAR CARACTERESVARIABLES IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variables ::= LET CARACTERESVARIABLES IGUAL typevariable PCOMA 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variables ::= LET CARACTERESVARIABLES IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variables ::= CONST CARACTERESVARIABLES IGUAL typevariable PCOMA 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-4)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variables ::= CONST CARACTERESVARIABLES IGUAL typevariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variables ::= error 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tiposvar ::= VAR 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("tiposvar",14, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tiposvar ::= LET 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("tiposvar",14, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tiposvar ::= CONST 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("tiposvar",14, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT sentenciaelse 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentenciaif ::= IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT sentenciaelseif 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaif",7, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaelse ::= ELSE LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelse",11, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaelseif ::= ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT sentenciaelseif 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelseif",12, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-8)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentenciaelseif ::= ELSE IF PARLEFT relacionconosinoperador PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaelseif",12, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-7)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentenciafor ::= FOR PARLEFT instruccionfor PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciafor",13, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-6)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instruccionfor ::= tiposvar CARACTERESVARIABLES IGUAL oprecursivas PCOMA CARACTERESVARIABLES operadoresrelacionales oprecursivas PCOMA CARACTERESVARIABLES aumentodecremento 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instruccionfor",15, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-10)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instruccionfor ::= CARACTERESVARIABLES IGUAL oprecursivas PCOMA CARACTERESVARIABLES operadoresrelacionales oprecursivas PCOMA CARACTERESVARIABLES aumentodecremento 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("instruccionfor",15, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-9)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // aumentodecremento ::= MAS MAS 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("aumentodecremento",17, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // aumentodecremento ::= MENOS MENOS 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("aumentodecremento",17, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentenciawhile ::= WHILE PARLEFT CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",22, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-8)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentenciawhile ::= sentenciadowhile WHILE PARLEFT CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",22, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-9)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentenciawhile ::= WHILE PARLEFT NOTPAR CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",22, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-10)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentenciawhile ::= sentenciadowhile WHILE PARLEFT NOTPAR CARACTERESVARIABLES operadoresrelacionales oprecursivas PARRIGHT PARRIGHT LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciawhile",22, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-11)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentenciadowhile ::= DO LLALEFT variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciadowhile",23, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentenciaswitch ::= SWITCH PARLEFT CARACTERESVARIABLES PARRIGHT LLALEFT recursivecase DEFAULT DOSPUNTOS variablesrecursivas LLARIGHT 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("sentenciaswitch",24, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-9)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // recursivecase ::= caseswitch recursivecase 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recursivecase",25, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // recursivecase ::= caseswitch 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("recursivecase",25, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // caseswitch ::= CASE typenumberovariable DOSPUNTOS variablesrecursivas BREAK PCOMA 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("caseswitch",26, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-5)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // oprecursivas ::= oprecursivas typenumberovariable operadoresaritmeticos 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("oprecursivas",21, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-2)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // oprecursivas ::= typenumberovariable operadoresaritmeticos 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("oprecursivas",21, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // oprecursivas ::= oprecursivas typenumberovariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("oprecursivas",21, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // oprecursivas ::= typenumberovariable 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("oprecursivas",21, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // oprecursivas ::= error 
            {
              Object RESULT =null;

              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("oprecursivas",21, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // typenumberovariable ::= NUMBER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typenumberovariable",20, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // typenumberovariable ::= DECIMAL 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typenumberovariable",20, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // typenumberovariable ::= CARACTERESVARIABLES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.peek()).value;
		RESULT=a;
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("typenumberovariable",20, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // consolelog ::= PRINT PARLEFT typenumberovariable PARRIGHT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-1)).value;
		Interfaz.Consolelog(a);
              CUP$Parserjs$result = parser.getSymbolFactory().newSymbol("consolelog",27, ((java_cup.runtime.Symbol)CUP$Parserjs$stack.elementAt(CUP$Parserjs$top-3)), ((java_cup.runtime.Symbol)CUP$Parserjs$stack.peek()), RESULT);
            }
          return CUP$Parserjs$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parserjs$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parserjs$do_action(
    int                        CUP$Parserjs$act_num,
    java_cup.runtime.lr_parser CUP$Parserjs$parser,
    java.util.Stack            CUP$Parserjs$stack,
    int                        CUP$Parserjs$top)
    throws java.lang.Exception
    {
              return CUP$Parserjs$do_action_part00000000(
                               CUP$Parserjs$act_num,
                               CUP$Parserjs$parser,
                               CUP$Parserjs$stack,
                               CUP$Parserjs$top);
    }
}

}
